gsub(colnames(TESCOP)[grep(colnames(TESCOP),pattern = 'M')],pattern = )
gsub(colnames(TESCOP)[grep(colnames(TESCOP),pattern = 'M')],pattern = 'M',replacement = '')
as.numeric(gsub(colnames(TESCOP)[grep(colnames(TESCOP),pattern = 'M')],pattern = 'M',replacement = ''))
as.numeric(gsub(colnames(TESCOP)[grep(colnames(TESCOP),pattern = 'M')],pattern = 'M',replacement = ''))/12
grep(colnames(TESCOP),pattern = 'M')
colnames(TESCOP)[grep(colnames(TESCOP),pattern = 'M')]
colnames(TESCOP)[grep(colnames(TESCOP),pattern = 'M')] = as.numeric(gsub(colnames(TESCOP)[grep(colnames(TESCOP),pattern = 'M')],pattern = 'M',replacement = ''))/12
as.numeric(gsub(colnames(TESCOP)[grep(colnames(TESCOP),pattern = 'Y')],pattern = 'Y',replacement = ''))
colnames(TESCOP)[grep(colnames(TESCOP),pattern = 'Y')] = as.numeric(gsub(colnames(TESCOP)[grep(colnames(TESCOP),pattern = 'Y')],pattern = 'Y',replacement = ''))
TESCOP
as.numeric(colnames(TESCOP))
tail(TESCOP)
tail(TESCOP,1)
Aproximarse = tail(TESCOP,1)
Aproximarse
approx(x = Aproximarse,y = )
approx(x = as.numeric(Aproximarse),y = )
10
10*365
10*52
519/52
approx(x = as.numeric(Aproximarse),y = 9.980769)
as.numeric(Aproximarse)
Aproximarse
approx(x = Aproximarse,y = 9.980769)
Aproximarse
approx(x = as.numeric(colnames(Aproximarse)),y = as.numeric(Aproximarse))
approx(x = as.numeric(colnames(Aproximarse)),y = as.numeric(Aproximarse),xout = 9.980769)
approx(x = as.numeric(colnames(Aproximarse)),y = as.numeric(Aproximarse),xout = 9.980769)$y
Aproximarse
Aproximarse
TESCOP[,'9.98']
TESCOP[,'9.98'] = 0
TESCOP
approx(x = as.numeric(colnames(Aproximarse)),y = as.numeric(x),xout = 9.980769)$y
TESCOP
TESCOP[,"10"]
dim(TESCOP[,"10"])
apply(TESCOP, 1, function(x){approx(x = as.numeric(colnames(Aproximarse)),y = as.numeric(x),xout = 9.980769)$y})
as.numeric(colnames(Aproximarse))
TESCOP
apply(TESCOP, 1, function(x){print(x)})
TESCOP
apply(TESCOP, 1, function(x){approx(x = as.numeric(colnames(Aproximarse)),y = as.numeric(x),xout = 9.980769)$y})
apply(TESCOP, 1, function(x){approx(x = as.numeric(colnames(Aproximarse)),y = as.numeric(x),xout = 9.980769)})
apply(TESCOP, 2, function(x){approx(x = as.numeric(colnames(Aproximarse)),y = as.numeric(x),xout = 9.980769)})
apply(TESCOP, 1, function(x){approx(x = as.numeric(colnames(Aproximarse)),y = as.numeric(x),xout = 9.980769)})
apply(TESCOP, 1, function(z){approx(x = as.numeric(colnames(Aproximarse)),y = as.numeric(z),xout = 9.980769)})
TESCOP
TESCOP[,1]
TESCOP[1,]
approx(x = as.numeric(colnames(Aproximarse)),y = as.numeric(TESCOP[1,]),xout = 9.980769)
Aproximarse
as.numeric(colnames(TESCOP))
as.numeric
approx(x = as.numeric(colnames(TESCOP)),y = as.numeric(TESCOP[1,]),xout = 9.980769)
as.numeric(colnames(TESCOP))
#### --------------------- Ejercicio: Optimizacion de portafolios ----------------- ############
####### ----------- Limpiar ambiente ------- ######
rm(list = ls())
options(scipen = 10000000)
##### --------- Path: automatico  --------- #####
path <<- gsub(rstudioapi::getActiveDocumentContext()$path,pattern = "/Ejercicios.+",replacement = "")
setwd(paste0(path))
##### -------- librerias ------- ######
librerias <- c("readxl","ggplot2","scales",'timeSeries','timeSeries','forecast','rugarch','fBasics','moments','tseries','PortfolioAnalytics','dplyr','zoo','nleqslv')
###### ----- Instalacion liberarias ------ ####
if(length(setdiff(librerias, rownames(installed.packages()))) > 0){
install.packages(setdiff(librerias, rownames(installed.packages())))}
invisible(sapply(librerias, require, character.only = TRUE,quietly = TRUE))
TESCOP = read_excel('/Users/germangonzalez/Dropbox (Quantil)/Uniandes Portafolio/Clases/Clase 4 - Selección de portafolios/Ejercicios/Datos/TESCOP.xlsx')
TESCOP= as.data.frame(TESCOP)
### --- Proyecte --- ###
TESCOP$TESCOP_1M
TESCOP$TESCOP_2M
TESCOP$TESCOP_3M
####### ---------- Funcion TES ----------- ######
rownames(TESCOP) = as.Date(TESCOP[,1])
TESCOP = TESCOP[,-1]
colnames(TESCOP) = gsub(x = colnames(TESCOP),pattern = 'TESCOP_',replacement = '')
colnames(TESCOP)[grep(colnames(TESCOP),pattern = 'M')] = as.numeric(gsub(colnames(TESCOP)[grep(colnames(TESCOP),pattern = 'M')],pattern = 'M',replacement = ''))/12
colnames(TESCOP)[grep(colnames(TESCOP),pattern = 'Y')] = as.numeric(gsub(colnames(TESCOP)[grep(colnames(TESCOP),pattern = 'Y')],pattern = 'Y',replacement = ''))
apply(TESCOP, 1, function(z){approx(x = as.numeric(colnames(Aproximarse)),y = as.numeric(z),xout = 9.980769)})
colnames(TESCOP)
apply(TESCOP, 1, function(z){approx(x = as.numeric(colnames(TESCOP)),y = as.numeric(z),xout = 9.980769)})
apply(TESCOP, 1, function(z){approx(x = as.numeric(colnames(TESCOP)),y = as.numeric(z),xout = 9.980769)$y})
Interpolacion = apply(TESCOP, 1, function(z){approx(x = as.numeric(colnames(TESCOP)),y = as.numeric(z),xout = 9.980769)$y})
Interpolacion
TESCOP
TESCOP[,'9.8']
TESCOP[,'9.8'] = Interpolacion
vieTESCOP
View(TESCOP)
Interpolacion = apply(TESCOP, 1, function(z){approx(x = as.numeric(colnames(TESCOP)),y = as.numeric(z),xout = 9.980769)$y})
######## ---- Interpolacion ---- ####3
Interpolacion = apply(TESCOP, 1, function(z){approx(x = as.numeric(colnames(TESCOP)),y = as.numeric(z),xout = 9.980769)$y})
TESCOP[,'9.8'] = Interpolacion
approx(x = as.numeric(colnames(TESCOP)),y =  as.numeric(TESCOP[1,]),xout = 9.980769)
TESCOP
xts(TESCOP,order.by = rownames(TESCOP))
TESCOP
rownames(TESCOP)
xts(TESCOP,order.by = as.Date(rownames(TESCOP)))
TESCOP_ts = xts(TESCOP,order.by = as.Date(rownames(TESCOP)))
TESCOP_ts
apply.weekly(TESCOP_ts,last)
TESCOP_ts = apply.weekly(TESCOP_ts,last)
TESCOP_ts
rownames(TESCOP_ts)
###### --------------------- Ejercicio: Optimizacion de portafolios ----------------- ############
####### ----------- Limpiar ambiente ------- ######
rm(list = ls())
options(scipen = 10000000)
##### --------- Path: automatico  --------- #####
path <<- gsub(rstudioapi::getActiveDocumentContext()$path,pattern = "/Ejercicios.+",replacement = "")
setwd(paste0(path))
##### -------- librerias ------- ######
librerias <- c("readxl","ggplot2","scales",'timeSeries','timeSeries','forecast','rugarch','fBasics','moments','tseries','PortfolioAnalytics','dplyr','zoo','nleqslv')
###### ----- Instalacion liberarias ------ ####
if(length(setdiff(librerias, rownames(installed.packages()))) > 0){
install.packages(setdiff(librerias, rownames(installed.packages())))}
invisible(sapply(librerias, require, character.only = TRUE,quietly = TRUE))
TESCOP = read_excel('/Users/germangonzalez/Dropbox (Quantil)/Uniandes Portafolio/Clases/Clase 4 - Selección de portafolios/Ejercicios/Datos/TESCOP.xlsx')
TESCOP= as.data.frame(TESCOP)
### --- Proyecte --- ###
TESCOP$TESCOP_1M
TESCOP$TESCOP_2M
TESCOP$TESCOP_3M
####### ---------- Funcion TES ----------- ######
rownames(TESCOP) = as.Date(TESCOP[,1])
TESCOP = TESCOP[,-1]
colnames(TESCOP) = gsub(x = colnames(TESCOP),pattern = 'TESCOP_',replacement = '')
colnames(TESCOP)[grep(colnames(TESCOP),pattern = 'M')] = as.numeric(gsub(colnames(TESCOP)[grep(colnames(TESCOP),pattern = 'M')],pattern = 'M',replacement = ''))/12
colnames(TESCOP)[grep(colnames(TESCOP),pattern = 'Y')] = as.numeric(gsub(colnames(TESCOP)[grep(colnames(TESCOP),pattern = 'Y')],pattern = 'Y',replacement = ''))
######## ---- Interpolacion ---- ####3
Interpolacion = apply(TESCOP, 1, function(z){approx(x = as.numeric(colnames(TESCOP)),y = as.numeric(z),xout = 9.980769)$y})
TESCOP[,'9.8'] = Interpolacion
approx(x = as.numeric(colnames(TESCOP)),y =  as.numeric(TESCOP[1,]),xout = 9.980769)
TESCOP_ts = xts(TESCOP,order.by = as.Date(rownames(TESCOP)))
TESCOP_ts = apply.weekly(TESCOP_ts,last)
rownames(TESCOP_ts)
TESCOP
rownames(TESCOP)
rownames(TESCOP)π1
rownames(TESCOP)[1]
rownames(TESCOP)π1
rownames(TESCOP)[1]
as.Date(rownames(TESCOP)[1])
tail(rownames(TESCOP))
tail(rownames(TESCOP),1)
## Vamos a generar la serie semanal ##
DatosSem=seq(as.Date(rownames(TESCOP)[1]),as.Date(tail(rownames(TESCOP),1))],by = "week")
## Vamos a generar la serie semanal ##
DatosSem=seq(as.Date(rownames(TESCOP)[1]),as.Date(tail(rownames(TESCOP),1)),by = "week")
DatosSem
# En caso de festivos, tomamos el dia mas cercano.
DatosSem=sapply(DatosSem,function(x){which.min(abs(as.Date(rownames(TESCOP))-x))})
DatosSem
TESCOP = TESCOP[c(DatosSem),]
View(TESCOP)
length(TESCOP)
dim(TESCOP)
dim(TESCOP)[1]
dim(TESCOP)[1]
TESCOP[,'9.8']
data.frame('Semana'=dim(TESCOP)[1],'Tasa1'=TESCOP[,'10'],'Tasa2'=TESCOP[,'9.8'])
data.frame('Semana'=dim(TESCOP)[1],'Tasa1'=TESCOP[,'10'],'Tasa2'=TESCOP[,'9.8'],'TES1','TES2')
data.frame('Semana'=dim(TESCOP)[1],'Tasa1'=TESCOP[,'10'],'Tasa2'=TESCOP[,'9.8'],'TES1'=0,'TES2'=0)
Resultados = data.frame('Semana'=dim(TESCOP)[1],'Tasa1'=TESCOP[,'10'],'Tasa2'=TESCOP[,'9.8'],'TES1'=0,'TES2'=0)
Resultados
Resultados
Resultados = data.frame('Semana'=c(1:dim(TESCOP)[1]),'Tasa1'=TESCOP[,'10'],'Tasa2'=TESCOP[,'9.8'],'TES1'=0,'TES2'=0)
Resultados
Resultados
Resultados[1,]
Resultados[1,]
Resultados[1,"Tasa1"]
1/(1+Resultados[1,"Tasa1"] )^(10)
Resultados
1/(1+Resultados[1,"Tasa1"]/100)^(10)
1/(1+(Resultados[1,"Tasa1"]/100))^(10)
10*52
519/52
###### --------------------- Ejercicio: Optimizacion de portafolios ----------------- ############
####### ----------- Limpiar ambiente ------- ######
rm(list = ls())
options(scipen = 10000000)
##### --------- Path: automatico  --------- #####
path <<- gsub(rstudioapi::getActiveDocumentContext()$path,pattern = "/Ejercicios.+",replacement = "")
setwd(paste0(path))
##### -------- librerias ------- ######
librerias <- c("readxl","ggplot2","scales",'timeSeries','timeSeries','forecast','rugarch','fBasics','moments','tseries','PortfolioAnalytics','dplyr','zoo','nleqslv')
###### ----- Instalacion liberarias ------ ####
if(length(setdiff(librerias, rownames(installed.packages()))) > 0){
install.packages(setdiff(librerias, rownames(installed.packages())))}
invisible(sapply(librerias, require, character.only = TRUE,quietly = TRUE))
TESCOP = read_excel('/Users/germangonzalez/Dropbox (Quantil)/Uniandes Portafolio/Clases/Clase 4 - Selección de portafolios/Ejercicios/Datos/TESCOP.xlsx')
TESCOP= as.data.frame(TESCOP)
### --- Proyecte --- ###
TESCOP$TESCOP_1M
TESCOP$TESCOP_2M
TESCOP$TESCOP_3M
####### ---------- Funcion TES ----------- ######
rownames(TESCOP) = as.Date(TESCOP[,1])
TESCOP = TESCOP[,-1]
colnames(TESCOP) = gsub(x = colnames(TESCOP),pattern = 'TESCOP_',replacement = '')
colnames(TESCOP)[grep(colnames(TESCOP),pattern = 'M')] = as.numeric(gsub(colnames(TESCOP)[grep(colnames(TESCOP),pattern = 'M')],pattern = 'M',replacement = ''))/12
colnames(TESCOP)[grep(colnames(TESCOP),pattern = 'Y')] = as.numeric(gsub(colnames(TESCOP)[grep(colnames(TESCOP),pattern = 'Y')],pattern = 'Y',replacement = ''))
######## ---- Interpolacion ---- ####3
Interpolacion = apply(TESCOP, 1, function(z){approx(x = as.numeric(colnames(TESCOP)),y = as.numeric(z),xout = 9.980769)$y})
TESCOP[,'9.98'] = Interpolacion
TESCOP[,'9.98'] = Interpolacion
## Vamos a generar la serie semanal ##
DatosSem=seq(as.Date(rownames(TESCOP)[1]),as.Date(tail(rownames(TESCOP),1)),by = "week")
# En caso de festivos, tomamos el dia mas cercano.
DatosSem=sapply(DatosSem,function(x){which.min(abs(as.Date(rownames(TESCOP))-x))})
TESCOP = TESCOP[c(DatosSem),]
Resultados = data.frame('Semana'=c(1:dim(TESCOP)[1]),'Tasa1'=TESCOP[,'10'],'Tasa2'=TESCOP[,'9.98'],'TES1'=0,'TES2'=0)
Resultados[1,"Tasa2"]  = 1/(1+(Resultados[1,"Tasa2"]/100))^(9.98)
head(Resultados)
###### --------------------- Ejercicio: Optimizacion de portafolios ----------------- ############
####### ----------- Limpiar ambiente ------- ######
rm(list = ls())
options(scipen = 10000000)
##### --------- Path: automatico  --------- #####
path <<- gsub(rstudioapi::getActiveDocumentContext()$path,pattern = "/Ejercicios.+",replacement = "")
setwd(paste0(path))
##### -------- librerias ------- ######
librerias <- c("readxl","ggplot2","scales",'timeSeries','timeSeries','forecast','rugarch','fBasics','moments','tseries','PortfolioAnalytics','dplyr','zoo','nleqslv')
###### ----- Instalacion liberarias ------ ####
if(length(setdiff(librerias, rownames(installed.packages()))) > 0){
install.packages(setdiff(librerias, rownames(installed.packages())))}
invisible(sapply(librerias, require, character.only = TRUE,quietly = TRUE))
TESCOP = read_excel('/Users/germangonzalez/Dropbox (Quantil)/Uniandes Portafolio/Clases/Clase 4 - Selección de portafolios/Ejercicios/Datos/TESCOP.xlsx')
TESCOP= as.data.frame(TESCOP)
### --- Proyecte --- ###
TESCOP$TESCOP_1M
TESCOP$TESCOP_2M
TESCOP$TESCOP_3M
####### ---------- Funcion TES ----------- ######
rownames(TESCOP) = as.Date(TESCOP[,1])
TESCOP = TESCOP[,-1]
colnames(TESCOP) = gsub(x = colnames(TESCOP),pattern = 'TESCOP_',replacement = '')
colnames(TESCOP)[grep(colnames(TESCOP),pattern = 'M')] = as.numeric(gsub(colnames(TESCOP)[grep(colnames(TESCOP),pattern = 'M')],pattern = 'M',replacement = ''))/12
colnames(TESCOP)[grep(colnames(TESCOP),pattern = 'Y')] = as.numeric(gsub(colnames(TESCOP)[grep(colnames(TESCOP),pattern = 'Y')],pattern = 'Y',replacement = ''))
######## ---- Interpolacion ---- ####3
Interpolacion = apply(TESCOP, 1, function(z){approx(x = as.numeric(colnames(TESCOP)),y = as.numeric(z),xout = 9.980769)$y})
TESCOP[,'9.98'] = Interpolacion
#TESCOP_ts = xts(TESCOP,order.by = as.Date(rownames(TESCOP)))
#TESCOP_ts = apply.weekly(TESCOP_ts,last)
## Vamos a generar la serie semanal ##
DatosSem=seq(as.Date(rownames(TESCOP)[1]),as.Date(tail(rownames(TESCOP),1)),by = "week")
# En caso de festivos, tomamos el dia mas cercano.
DatosSem=sapply(DatosSem,function(x){which.min(abs(as.Date(rownames(TESCOP))-x))})
TESCOP = TESCOP[c(DatosSem),]
Resultados = data.frame('Semana'=c(1:dim(TESCOP)[1]),'Tasa1'=TESCOP[,'10'],'Tasa2'=TESCOP[,'9.98'],'TES1'=0,'TES2'=0)
Resultados[1,"TES1"]  = 1/(1+(Resultados[1,"Tasa1"]/100))^(10)
Resultados
Resultados[1,"TES2"]  = 1/(1+(Resultados[1,"Tasa2"]/100))^(9.98)
Resultados
dim(Resultados)
dim(Resultados)[1]
for (j in c(1:dim(Resultados)[1])) {
Resultados[1,"TES1"]  = 1/(1+(Resultados[1,"Tasa1"]/100))^(10)
Resultados[1,"TES2"]  = 1/(1+(Resultados[1,"Tasa2"]/100))^(9.98)
}
Resultados = data.frame('Semana'=c(1:dim(TESCOP)[1]),'Tasa1'=TESCOP[,'10'],'Tasa2'=TESCOP[,'9.98'],'TES1'=0,'TES2'=0)
for (j in c(1:dim(Resultados)[1])) {
##### ---- TES 1 ---- ###
Resultados[j,"TES1"] = 1/(1+(Resultados[j,"Tasa1"]/100))^(10)
##### ---- TES 2 ---- ###
Resultados[j,"TES2"] = 1/(1+(Resultados[j,"Tasa2"]/100))^(9.98)
}
###### --------------------- Ejercicio: Optimizacion de portafolios ----------------- ############
####### ----------- Limpiar ambiente ------- ######
rm(list = ls())
options(scipen = 10000000)
##### --------- Path: automatico  --------- #####
path <<- gsub(rstudioapi::getActiveDocumentContext()$path,pattern = "/Ejercicios.+",replacement = "")
setwd(paste0(path))
##### -------- librerias ------- ######
librerias <- c("readxl","ggplot2","scales",'timeSeries','timeSeries','forecast','rugarch','fBasics','moments','tseries','PortfolioAnalytics','dplyr','zoo','nleqslv')
###### ----- Instalacion liberarias ------ ####
if(length(setdiff(librerias, rownames(installed.packages()))) > 0){
install.packages(setdiff(librerias, rownames(installed.packages())))}
invisible(sapply(librerias, require, character.only = TRUE,quietly = TRUE))
TESCOP = read_excel('/Users/germangonzalez/Dropbox (Quantil)/Uniandes Portafolio/Clases/Clase 4 - Selección de portafolios/Ejercicios/Datos/TESCOP.xlsx')
TESCOP= as.data.frame(TESCOP)
### --- Proyecte --- ###
TESCOP$TESCOP_1M
TESCOP$TESCOP_2M
TESCOP$TESCOP_3M
####### ---------- Funcion TES ----------- ######
rownames(TESCOP) = as.Date(TESCOP[,1])
TESCOP = TESCOP[,-1]
colnames(TESCOP) = gsub(x = colnames(TESCOP),pattern = 'TESCOP_',replacement = '')
colnames(TESCOP)[grep(colnames(TESCOP),pattern = 'M')] = as.numeric(gsub(colnames(TESCOP)[grep(colnames(TESCOP),pattern = 'M')],pattern = 'M',replacement = ''))/12
colnames(TESCOP)[grep(colnames(TESCOP),pattern = 'Y')] = as.numeric(gsub(colnames(TESCOP)[grep(colnames(TESCOP),pattern = 'Y')],pattern = 'Y',replacement = ''))
######## ---- Interpolacion ---- ####3
Interpolacion = apply(TESCOP, 1, function(z){approx(x = as.numeric(colnames(TESCOP)),y = as.numeric(z),xout = 9.980769)$y})
TESCOP[,'9.98'] = Interpolacion
#TESCOP_ts = xts(TESCOP,order.by = as.Date(rownames(TESCOP)))
#TESCOP_ts = apply.weekly(TESCOP_ts,last)
## Vamos a generar la serie semanal ##
DatosSem=seq(as.Date(rownames(TESCOP)[1]),as.Date(tail(rownames(TESCOP),1)),by = "week")
# En caso de festivos, tomamos el dia mas cercano.
DatosSem=sapply(DatosSem,function(x){which.min(abs(as.Date(rownames(TESCOP))-x))})
TESCOP = TESCOP[c(DatosSem),]
Resultados = data.frame('Semana'=c(1:dim(TESCOP)[1]),'Tasa1'=TESCOP[,'10'],'Tasa2'=TESCOP[,'9.98'],'TES1'=0,'TES2'=0)
for (j in c(1:dim(Resultados)[1])) {
##### ---- TES 1 ---- ###
Resultados[j,"TES1"] = 1/(1+(Resultados[j,"Tasa1"]/100))^(10)
##### ---- TES 2 ---- ###
Resultados[j,"TES2"] = 1/(1+(Resultados[j,"Tasa2"]/100))^(9.98)
}
View(Resultados)
Resultados[,"Tasa2"]
Resultados[-1,"Tasa2"]
length(Resultados)
nrow(Resultados)
cbind(Resultados[-nrow(Resultados),"Tasa1"],Resultados[-1,"Tasa2"])
cbind(Resultados[-nrow(Resultados),"TES1"],Resultados[-1,"TES2"])
TESS = cbind(Resultados[-nrow(Resultados),"TES1"],Resultados[-1,"TES2"])
TESS
(TESS[,2]/TESS[,1])-1
mean((TESS[,2]/TESS[,1])-1)
mean((TESS[,2]/TESS[,1])-1)
(TESS[,2]/TESS[,1])
mean((TESS[,2]/TESS[,1]))
mean((TESS[,2]/TESS[,1]))^52
Resultados$Acum = cumprod(TESS[,2]/TESS[,1])
Resultados$Acum = c(1,cumprod(TESS[,2]/TESS[,1]))
Resultados$Acum
((365*10-7)/365)
((365*10-7)/365)
######## ---- Interpolacion ---- ####3
Interpolacion = apply(TESCOP, 1, function(z){approx(x = as.numeric(colnames(TESCOP)),y = as.numeric(z),xout = ((365*10-7)/365))$y})
TESCOP[,'9.98'] = Interpolacion
## Vamos a generar la serie semanal ##
DatosSem=seq(as.Date(rownames(TESCOP)[1]),as.Date(tail(rownames(TESCOP),1)),by = "week")
# En caso de festivos, tomamos el dia mas cercano.
DatosSem=sapply(DatosSem,function(x){which.min(abs(as.Date(rownames(TESCOP))-x))})
TESCOP = TESCOP[c(DatosSem),]
Resultados = data.frame('Semana'=c(1:dim(TESCOP)[1]),'Tasa1'=TESCOP[,'10'],'Tasa2'=TESCOP[,'9.98'],'TES1'=0,'TES2'=0)
###### --------------------- Ejercicio: Optimizacion de portafolios ----------------- ############
####### ----------- Limpiar ambiente ------- ######
rm(list = ls())
options(scipen = 10000000)
##### --------- Path: automatico  --------- #####
path <<- gsub(rstudioapi::getActiveDocumentContext()$path,pattern = "/Ejercicios.+",replacement = "")
setwd(paste0(path))
##### -------- librerias ------- ######
librerias <- c("readxl","ggplot2","scales",'timeSeries','timeSeries','forecast','rugarch','fBasics','moments','tseries','PortfolioAnalytics','dplyr','zoo','nleqslv')
###### ----- Instalacion liberarias ------ ####
if(length(setdiff(librerias, rownames(installed.packages()))) > 0){
install.packages(setdiff(librerias, rownames(installed.packages())))}
invisible(sapply(librerias, require, character.only = TRUE,quietly = TRUE))
TESCOP = read_excel('/Users/germangonzalez/Dropbox (Quantil)/Uniandes Portafolio/Clases/Clase 4 - Selección de portafolios/Ejercicios/Datos/TESCOP.xlsx')
TESCOP= as.data.frame(TESCOP)
### --- Proyecte --- ###
TESCOP$TESCOP_1M
TESCOP$TESCOP_2M
TESCOP$TESCOP_3M
####### ---------- Funcion TES ----------- ######
rownames(TESCOP) = as.Date(TESCOP[,1])
TESCOP = TESCOP[,-1]
colnames(TESCOP) = gsub(x = colnames(TESCOP),pattern = 'TESCOP_',replacement = '')
colnames(TESCOP)[grep(colnames(TESCOP),pattern = 'M')] = as.numeric(gsub(colnames(TESCOP)[grep(colnames(TESCOP),pattern = 'M')],pattern = 'M',replacement = ''))/12
colnames(TESCOP)[grep(colnames(TESCOP),pattern = 'Y')] = as.numeric(gsub(colnames(TESCOP)[grep(colnames(TESCOP),pattern = 'Y')],pattern = 'Y',replacement = ''))
######## ---- Interpolacion ---- ####3
Interpolacion = apply(TESCOP, 1, function(z){approx(x = as.numeric(colnames(TESCOP)),y = as.numeric(z),xout = ((365*10-7)/365))$y})
TESCOP[,'9.98'] = Interpolacion
#TESCOP_ts = xts(TESCOP,order.by = as.Date(rownames(TESCOP)))
#TESCOP_ts = apply.weekly(TESCOP_ts,last)
## Vamos a generar la serie semanal ##
DatosSem=seq(as.Date(rownames(TESCOP)[1]),as.Date(tail(rownames(TESCOP),1)),by = "week")
# En caso de festivos, tomamos el dia mas cercano.
DatosSem=sapply(DatosSem,function(x){which.min(abs(as.Date(rownames(TESCOP))-x))})
TESCOP = TESCOP[c(DatosSem),]
Resultados = data.frame('Semana'=c(1:dim(TESCOP)[1]),'Tasa1'=TESCOP[,'10'],'Tasa2'=TESCOP[,'9.98'],'TES1'=0,'TES2'=0)
for (j in c(1:dim(Resultados)[1])) {
##### ---- TES 1 ---- ###
Resultados[j,"TES1"] = 1/(1+(Resultados[j,"Tasa1"]/100))^(10)
##### ---- TES 2 ---- ###
Resultados[j,"TES2"] = 1/(1+(Resultados[j,"Tasa2"]/100))^((365*10-7)/365)
}
TESS = cbind(Resultados[-nrow(Resultados),"TES1"],Resultados[-1,"TES2"])
Resultados$Acum = c(1,cumprod(TESS[,2]/TESS[,1]))
Resultados
((365*10-7)/365)
Resultados$Acum
TESS[,2]/TESS[,1]
TESS
Resultados
1/(1+(Resultados[j,"Tasa1"]/100))^(9)-1/(1+(Resultados[j,"Tasa1"]/100))^(10)
(1/(1+(Resultados[j,"Tasa1"]/100))^(9)-1/(1+(Resultados[j,"Tasa1"]/100))^(10))/1/(1+(Resultados[j,"Tasa1"]/100))^(10)
(1/(1+(Resultados[j,"Tasa1"]/100))^(9)-1/(1+(Resultados[j,"Tasa1"]/100))^(10))/(1/(1+(Resultados[j,"Tasa1"]/100))^(10))
TESS
cumprod(TESS[,2]/TESS[,1])
3.336591^(1/10)
(3.336591/2.756324)^(1/10)
(3.336591/2.756324)^(1/2)
(3.336591/2.789913)^(1/2)
Resultados
tail(Resultados)
tail(Resultados,104)
Resultados
TESCOP = read_excel('TESCOP.xlsx')
##### --------- Paso 1: Cargar datos ------ #####
TESCOP = read_excel('TESCOP.xlsx')
###### --------------------- Ejercicio: Optimizacion de portafolios ----------------- ############
####### ----------- Limpiar ambiente ------- ######
rm(list = ls())
options(scipen = 10000000)
##### --------- Path: automatico  --------- #####
path <<- gsub(rstudioapi::getActiveDocumentContext()$path,pattern = "/Ejercicio 2.+",replacement = "")
setwd(paste0(path,'/Ejercicio 2'))
##### -------- librerias ------- ######
librerias <- c("readxl","ggplot2","scales",'timeSeries','timeSeries','forecast','rugarch','fBasics','moments','tseries','PortfolioAnalytics','dplyr','zoo','nleqslv','usdm','lubridate','xts','forecast','RQuantLib','tseries','urca','nleqslv','uroot','vars','GeneralizedHyperbolic','plyr','fUnitRoots','xtable','mvtnorm','reshape2','ggplot2','grid','fitdistrplus','tsDyn')
###### ----- Instalacion liberarias ------ ####
if(length(setdiff(librerias, rownames(installed.packages()))) > 0){
install.packages(setdiff(librerias, rownames(installed.packages())))}
invisible(sapply(librerias, require, character.only = TRUE,quietly = TRUE))
##### --------- Path: automatico  --------- #####
path <<- gsub(rstudioapi::getActiveDocumentContext()$path,pattern = "/Ejercicios",replacement = "")
###### --------------------- Ejercicio: Optimizacion de portafolios ----------------- ############
####### ----------- Limpiar ambiente ------- ######
rm(list = ls())
options(scipen = 10000000)
##### --------- Path: automatico  --------- #####
path <<- gsub(rstudioapi::getActiveDocumentContext()$path,pattern = "/Ejercicios",replacement = "")
setwd(paste0(path,'/Ejercicio 2'))
setwd(paste0(path,'/Ejercicios'))
###### --------------------- Ejercicio: Optimizacion de portafolios ----------------- ############
####### ----------- Limpiar ambiente ------- ######
rm(list = ls())
options(scipen = 10000000)
##### --------- Path: automatico  --------- #####
path <<- gsub(rstudioapi::getActiveDocumentContext()$path,pattern = "/Ejercicios",replacement = "")
path
###### --------------------- Ejercicio: Optimizacion de portafolios ----------------- ############
####### ----------- Limpiar ambiente ------- ######
rm(list = ls())
options(scipen = 10000000)
##### --------- Path: automatico  --------- #####
path <<- gsub(rstudioapi::getActiveDocumentContext()$path,pattern = "/Utilities.R",replacement = "")
setwd(paste0(path))
setwd
##### -------- librerias ------- ######
librerias <- c("readxl","ggplot2","scales",'timeSeries','timeSeries','forecast','rugarch','fBasics','moments','tseries','PortfolioAnalytics','dplyr','zoo','nleqslv','usdm','lubridate','xts','forecast','RQuantLib','tseries','urca','nleqslv','uroot','vars','GeneralizedHyperbolic','plyr','fUnitRoots','xtable','mvtnorm','reshape2','ggplot2','grid','fitdistrplus','tsDyn')
###### ----- Instalacion liberarias ------ ####
if(length(setdiff(librerias, rownames(installed.packages()))) > 0){
install.packages(setdiff(librerias, rownames(installed.packages())))}
invisible(sapply(librerias, require, character.only = TRUE,quietly = TRUE))
##### --------- Paso 1: Cargar datos ------ #####
TESCOP = read_excel('TESCOP.xlsx')
path
setwd(paste0(path,'/'))
##### -------- librerias ------- ######
librerias <- c("readxl","ggplot2","scales",'timeSeries','timeSeries','forecast','rugarch','fBasics','moments','tseries','PortfolioAnalytics','dplyr','zoo','nleqslv','usdm','lubridate','xts','forecast','RQuantLib','tseries','urca','nleqslv','uroot','vars','GeneralizedHyperbolic','plyr','fUnitRoots','xtable','mvtnorm','reshape2','ggplot2','grid','fitdistrplus','tsDyn')
###### ----- Instalacion liberarias ------ ####
if(length(setdiff(librerias, rownames(installed.packages()))) > 0){
install.packages(setdiff(librerias, rownames(installed.packages())))}
invisible(sapply(librerias, require, character.only = TRUE,quietly = TRUE))
##### --------- Paso 1: Cargar datos ------ #####
TESCOP = read_excel('TESCOP.xlsx')
path
paste0(path,'/')
###### --------------------- Ejercicio: Optimizacion de portafolios ----------------- ############
####### ----------- Limpiar ambiente ------- ######
rm(list = ls())
options(scipen = 10000000)
##### --------- Path: automatico  --------- #####
path <<- gsub(rstudioapi::getActiveDocumentContext()$path,pattern = "/Utilities.R",replacement = "")
setwd(paste0(path,'/'))
##### -------- librerias ------- ######
librerias <- c("readxl","ggplot2","scales",'timeSeries','timeSeries','forecast','rugarch','fBasics','moments','tseries','PortfolioAnalytics','dplyr','zoo','nleqslv','usdm','lubridate','xts','forecast','RQuantLib','tseries','urca','nleqslv','uroot','vars','GeneralizedHyperbolic','plyr','fUnitRoots','xtable','mvtnorm','reshape2','ggplot2','grid','fitdistrplus','tsDyn')
###### ----- Instalacion liberarias ------ ####
if(length(setdiff(librerias, rownames(installed.packages()))) > 0){
install.packages(setdiff(librerias, rownames(installed.packages())))}
invisible(sapply(librerias, require, character.only = TRUE,quietly = TRUE))
path
##### --------- Paso 1: Cargar datos ------ #####
TESCOP = read_excel('Datos/TESCOP.xlsx')
TESCOP= as.data.frame(TESCOP)
####### ---------- Funcion TES ----------- ######
rownames(TESCOP) = as.Date(TESCOP[,1])
TESCOP = TESCOP[,-1]
colnames(TESCOP) = gsub(x = colnames(TESCOP),pattern = 'TESCOP_',replacement = '')
colnames(TESCOP)[grep(colnames(TESCOP),pattern = 'M')] = as.numeric(gsub(colnames(TESCOP)[grep(colnames(TESCOP),pattern = 'M')],pattern = 'M',replacement = ''))/12
colnames(TESCOP)[grep(colnames(TESCOP),pattern = 'Y')] = as.numeric(gsub(colnames(TESCOP)[grep(colnames(TESCOP),pattern = 'Y')],pattern = 'Y',replacement = ''))
######## ---- Interpolacion ---- ####3
Interpolacion = apply(TESCOP, 1, function(z){approx(x = as.numeric(colnames(TESCOP)),y = as.numeric(z),xout = ((365*10-7)/365))$y})
TESCOP[,'9.98'] = Interpolacion
## Vamos a generar la serie semanal ##
DatosSem=seq(as.Date(rownames(TESCOP)[1]),as.Date(tail(rownames(TESCOP),1)),by = "week")
# En caso de festivos, tomamos el dia mas cercano.
DatosSem=sapply(DatosSem,function(x){which.min(abs(as.Date(rownames(TESCOP))-x))})
#
TESCOP = TESCOP[c(DatosSem),]
Resultados = data.frame('Semana'=c(1:dim(TESCOP)[1]),'Tasa1'=TESCOP[,'10'],'Tasa2'=TESCOP[,'9.98'],'TES1'=0,'TES2'=0)
for (j in c(1:dim(Resultados)[1])) {
##### ---- TES 1 ---- ###
Resultados[j,"TES1"] = 1/(1+(Resultados[j,"Tasa1"]/100))^(10)
##### ---- TES 2 ---- ###
Resultados[j,"TES2"] = 1/(1+(Resultados[j,"Tasa2"]/100))^((365*10-7)/365)
}
TESS = cbind(Resultados[-nrow(Resultados),"TES1"],Resultados[-1,"TES2"])
Resultados$Acum = c(1,cumprod(TESS[,2]/TESS[,1]))
Resultados
## Vamos a generar la serie semanal ##
DatosSem=seq(as.Date(rownames(TESCOP)[1]),as.Date(tail(rownames(TESCOP),1)),by = "week")
