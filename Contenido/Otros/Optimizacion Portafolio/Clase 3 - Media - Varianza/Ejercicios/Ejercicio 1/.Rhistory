Skewness=skewness(x, na.rm = T),
JV_pvalor=jarque.bera.test(x)$p.value,
L_B=Box.test(x, type = "Ljung-Box")$p.value, row.names = NULL)
}
##################### ---------------- Numeral 1 ------------------------ ####################
##################### ---------------- Numeral 2 ------------------------ ####################
# Solución Taller 2 -------------------------------------------------------
# Descargue los datos. Seleccione un periodo de an´alisis. Justifique el periodo seleccionado
inflacion<-(read_excel('/Users/germangonzalez/Dropbox (Quantil)/Caribe/Codigos/Econometría/Datos/IPC_Variacion.xlsx', sheet=1, col_names = F))
inflacion  = as.data.frame(inflacion)
inflacion = inflacion[-c(1:5),]
inflacion = inflacion[-c(which(inflacion == "En año corrido"):dim(inflacion)[1]),]
colnames(inflacion) = as.numeric(inflacion[1,])
inflacion = inflacion[-1,]
rownames(inflacion) = NULL
inflacion = inflacion[,-1]
Base_inflacion = NULL
for (j in c(1:dim(inflacion)[2])) {
Base_inflacion = c(Base_inflacion,as.numeric(inflacion[,j]))
}
Grilla_fechas = seq(from = as.Date(paste0(colnames(inflacion)[1],'-01-01')),to = as.Date(paste0( year(Sys.Date()),'-12-31')),by = 'month')
inflacion = data.frame(Fecha = as.character(Grilla_fechas),IPC = Base_inflacion)
inflacion = inflacion[!is.na(inflacion[,2]),]
inflacion<-ts(inflacion[,-1], start = c(2003,1), frequency = 12)
loginflacion<-log(inflacion)
#No tiene sentido usar log para la serie porque los valores son muy cercanos a 0
# Discuta, a la luz de la teor´ıa econ´omica y financiera, cu´ales de los componentes son relevantes
# para incluir en su modelo.
# Estime los componentes de tendencia y estacionalidad (si es relevante). Justifique con estadsticas
# y criterios de informaci´on el modelo estimado.
#Revisando estacionalidad
modelo1<-tslm(inflacion~season-1)
summary(modelo1)
linearHypothesis(modelo1, c("season1=season2",
"season1=season3",
"season1=season4",
"season1=season5",
"season1=season6",
"season1=season7",
"season1=season8",
"season1=season9",
"season1=season10",
"season1=season11",
"season1=season12"
))
par(mfrow=c(2,1), mar=c(3,4.5,1,1))
plot(inflacion, ylab="observado vs ajustado", xlab="", bty="l")
lines(modelo1$fitted.values, col="tomato")
legend("topleft",c("Observado", "Ajustado"), lwd = c(2,2), col = c("black","tomato"))
plot(modelo1$residuals, col="darkred", ylab="residuales", xlab="", bty="l")
dev.off()
#Revisando tendencia
#Ajustando para varios modelos de te
modelo1 = tslm(inflacion ~ trend)
modelo2 = tslm(inflacion ~ trend+I(trend^2))
modelo3 = tslm(inflacion ~ trend+I(trend^2)+I(trend^3))
modelo4 = tslm(inflacion ~ trend+I(trend^2)+I(trend^3)+I(trend^4))
modelo5 = tslm(inflacion ~ I(log(trend)))
modelo6 = tslm(inflacion ~ I(exp(trend)))
### --- Estadisticas descriptivas --- ###
summary(modelo1)
summary(modelo2)
summary(modelo3)
summary(modelo4)
summary(modelo5)
summary(modelo6)
pdf(paste0(path, "Graficos/ATendencias.pdf"), width = 14, height = 8)
par(mfrow=c(2,3), mar=c(3, 4, 2, 2) )
plot(inflacion, lwd=2, xlab="", main="Lineal", ylab="Valor Inflación",cex.lab=2.5, cex.axis=2.5, cex.main=2.5, cex.sub=2.5)
lines(modelo1$fitted.values, col="darkred", lwd=2, lty=1)
plot(inflacion, lwd=2, xlab="", main="Polinomio (Grado 2)",ylab="Valor Inflación",cex.lab=2.5, cex.axis=2.5, cex.main=2.5, cex.sub=2.5)
lines(modelo2$fitted.values, col="darkred", lwd=2, lty=1)
plot(inflacion, lwd=2, xlab="", main="Polinomio (Grado 3)",ylab="Valor Inflación",cex.lab=2.5, cex.axis=2.5, cex.main=2.5, cex.sub=2.5)
lines(modelo3$fitted.values, col="darkred", lwd=2, lty=1)
plot(inflacion, lwd=2, xlab="", main="Polinomio (Grado 4)",ylab="Valor Inflación",cex.lab=2.5, cex.axis=2.5, cex.main=2.5, cex.sub=2.5)
lines(modelo4$fitted.values, col="darkred", lwd=2, lty=1)
plot(inflacion, lwd=2, xlab="", main="Logarítmico",ylab="Valor Inflación",cex.lab=2.5, cex.axis=2.5, cex.main=2.5, cex.sub=2.5)
lines(modelo5$fitted.values, col="darkred", lwd=2, lty=1)
plot(inflacion, lwd=2, xlab="", main="Exponencial",ylab="Valor Inflación",cex.lab=2.5, cex.axis=2.5, cex.main=2.5, cex.sub=2.5)
lines(modelo6$fitted.values, col="darkred", lwd=2, lty=1)
dev.off()
par(mfrow=c(2,3), mar=c(3, 4, 2, 2) )
plot(modelo1$residuals, lwd=2, xlab="", main="Lineal",ylab="Valor Inflación")
abline(h=0, col="darkred", lty=2)
plot(modelo2$residuals, lwd=2, xlab="", main="Polinomio (Grado 2)",ylab="Valor Inflación")
abline(h=0, col="darkred", lty=2)
plot(modelo3$residuals, lwd=2, xlab="", main="Polinomio (Grado 3)",ylab="Valor Inflación")
abline(h=0, col="darkred", lty=2)
Tabla1 = rbind(Tabla_resumen(modelo1,Titulo = "Lineal"),Tabla_resumen(modelo2,Titulo = "Polinomio (Grado 2)"),Tabla_resumen(modelo3,Titulo = "Polinomio (Grado 3)"),Tabla_resumen(modelo4,Titulo = "Polinomio (Grado 4)"),Tabla_resumen(modelo5,Titulo = "Logaritmico"),Tabla_resumen(modelo6,Titulo = "Exponencial"))
### --- Tabla 1: Criterios de informaci??n: Tendencia --- ###
xtable(Tabla1)
#Ajustando por tendencia y estacionalidad
modelo1e = tslm(inflacion ~ trend+season-1)
modelo2e = tslm(inflacion ~ trend+I(trend^2)+season-1)
modelo3e = tslm(inflacion ~ trend+I(trend^2)+I(trend^3)+season-1)
modelo4e = tslm(inflacion  ~ trend+I(trend^2)+I(trend^3)+I(trend^4)+season-1)
modelo5e = tslm(inflacion ~ I(log(trend))+season-1)
modelo6e = tslm(inflacion  ~ I(exp(trend))+season-1)
summary(modelo1e)
summary(modelo2e)
summary(modelo3e)
summary(modelo4e)
summary(modelo5e)
summary(modelo6e)
par(mfrow=c(1,3), mar=c(3, 4, 2, 2) )
plot(inflacion, ylab="Observado vs Ajustado", xlab="", bty="l", main ="Ajuste con tendencia lineal y estacionalidad")
lines(modelo1e$fitted.values, col="tomato")
plot(inflacion, ylab="Observado vs Ajustado", xlab="", bty="l", main="Ajuste con tendencia cuadrática y estacionalidad")
lines(modelo2e$fitted.values, col="tomato")
plot(inflacion, ylab="Observado vs Ajustado", xlab="", bty="l", main="Ajuste con tendencia de Grado 4 y estacionalidad")
lines(modelo4e$fitted.values, col="tomato")
Tabla1e = rbind(Tabla_resumen(modelo1e,Titulo = "Lineal"),Tabla_resumen(modelo2e,Titulo = "Polinomio Grado 2"),Tabla_resumen(modelo4e,Titulo = "Polinomio Grado 4"))
xtable(Tabla1e)
# Punto 5: Gráficos de la serie desestacionalizada y sin tendencia --------
# Con tendencia lineal ----------------------------------------------------
Serie_limpia_1e= as.data.frame(modelo1e$residuals)
rownames(Serie_limpia_1e) = seq(as.Date("2003-3-1"),length.out = dim(Serie_limpia_1e)[1],by="month")
pdf(paste0(path, "Graficos/1e_limpia.pdf"), width = 20, height = 8)
Graficar_serie(Serie_limpia_1e,Etiqueta_y = "Inflación",Titulo = "Tendencia líneal")
# Punto 6: Componente Cíclico ---------------------------------------------
# Pruebas ruido blanco de los modelos -------------------------------------
Tabla_box_test = rbind(data.frame(Modelo = "Lineal", Ljung_Box = Box.test(modelo1e$residuals,type="Ljung-Box")$p.value,Box_Pierce = Box.test(modelo2e$residuals,type="Box-Pierce")$p.value),data.frame(Modelo = "Grado 2", Ljung_Box = Box.test(modelo4e$residuals,type="Ljung-Box")$p.value,Box_Pierce = Box.test(modelo2e$residuals,type="Box-Pierce")$p.value),data.frame(Modelo = "Grado 4", Ljung_Box = Box.test(modelo4e$residuals,type="Ljung-Box")$p.value,Box_Pierce = Box.test(modelo4e$residuals,type="Box-Pierce")$p.value))
xtable(Tabla_box_test)
#Autoarima
auto.arima(modelo2e$residuals, parallel = T, stepwise = F, approx = F, seasonal = F)
#De acuerdo al autoarima y a las funciones de autocorrelación, el mejor candidato es un AR(1)
##### ----------------- Función: Construcción de Dummies ----------------- ####
Construccion_dummys = function(Datos,Year, Month, Grado = 2){
bi_estac = seasonaldummy(Datos)
bi_estac = cbind(bi_estac, Dec=apply(bi_estac, MARGIN = 1, function(x){1-sum(x)}))
if (Grado == 1) {
tendencia<-cbind(t=1:length(Datos))
}  else if (Grado == 2) {
tendencia<-cbind(t=1:length(Datos), t2=(1:length(Datos))^2)
} else if (Grado == 4) {
tendencia<-cbind(t=1:length(Datos), t2=(1:length(Datos))^2,t3=(1:length(Datos))^3,t4=(1:length(Datos))^4)
}
tend_esta <-ts(cbind(bi_estac,tendencia), start=c(Year, Month), frequency = 12)
return(tend_esta)
}
#Modelo con tendencia lineal
tend1<-Construccion_dummys(inflacion, 2003, 1, Grado = 1)
modelo3.1<-Arima(inflacion, order = c(1,0,0), xreg = tend1, include.mean = F)
summary(modelo3.1)
par(mfrow=c(2,1), mar=c(3,4.5,1,1))
plot(modelo3.1$fitted, ylab="observado vs ajustado")
lines(modelo3.1$x, col="tomato")
legend("topleft",c("Observado", "Ajustado"), lwd = c(2,2), col = c("black","tomato"))
plot(modelo3.1$residuals, ylab="residuales")
#Modelo con tendencia cuadrática
tend2<-Construccion_dummys(inflacion, 2003, 1, Grado = 2)
modelo3.2<-Arima(inflacion, order = c(1,0,0), xreg = tend2, include.mean = F)
summary(modelo3.2)
par(mfrow=c(2,1), mar=c(3,4.5,1,1))
plot(modelo3.2$fitted, ylab="observado vs ajustado")
lines(modelo3.2$x, col="tomato")
legend("topleft",c("Observado", "Ajustado"), lwd = c(2,2), col = c("black","tomato"))
plot(modelo3.2$residuals, ylab="residuales")
#Modelo con tendencia de grado 4
tend3<-Construccion_dummys(inflacion, 2003, 1, Grado= 4)
modelo3.3<-Arima(inflacion, order = c(1,0,0), xreg = tend3, include.mean = F)
summary(modelo3.3)
par(mfrow=c(2,1), mar=c(3,4.5,1,1))
plot(modelo3.3$fitted, ylab="observado vs ajustado")
lines(modelo3.3$x, col="tomato")
legend("topleft",c("Observado", "Ajustado"), lwd = c(2,2), col = c("black","tomato"))
plot(modelo3.3$residuals, ylab="residuales")
#Probar distintos modelos con tendencia lineal
Mejor_Modelo_0 = Arima(inflacion, order = c(1,0,0), include.mean = F,xreg = TE_1t)
Tabla = NULL
for(i in 0:5) {
Modelo_p2_0 = Arima(inflacion, order = c(i,0,0), xreg = tend1, include.mean = F)
Tabla_t = data.frame(Orden = c(paste0("c(",i,",0,0)")),AIC = c(AIC(Modelo_p2_0)), BIC =c(BIC(Modelo_p2_0)))
Tabla = rbind(Tabla,Tabla_t)
}
xtable(Tabla)
Mejor_modelo = Tabla[which.min(Tabla$AIC),]
Mejor_modelo
#Probar distintos modelos con MA con tendencia lineal
Tabla = NULL
for(i in 0:5) {
Modelo_p2_0 = Arima(inflacion, order = c(1,0,i), xreg = tend1, include.mean = F)
Tabla_t = data.frame(Orden = c(paste0("c(1,0,",i,")")),AIC = c(AIC(Modelo_p2_0)), BIC =c(BIC(Modelo_p2_0)))
Tabla = rbind(Tabla,Tabla_t)
}
xtable(Tabla)
Mejor_modelo = Tabla[which.min(Tabla$AIC),]
Mejor_modelo
#Probar distintos modelos AR con tendencia cuadrática
Mejor_Modelo_0 = Arima(inflacion, order = c(1,0,0), include.mean = F,xreg = tend2)
Tabla = NULL
for(i in 0:5) {
Modelo_p2_0 = Arima(inflacion, order = c(i,0,0), xreg = tend2, include.mean = F)
Tabla_t = data.frame(Orden = c(paste0("c(",i,",0,0)")),AIC = c(AIC(Modelo_p2_0)), BIC =c(BIC(Modelo_p2_0)))
Tabla = rbind(Tabla,Tabla_t)
}
xtable(Tabla)
Mejor_modelo = Tabla[which.min(Tabla$AIC),]
Mejor_modelo
#Probar distintos modelos MA con tendencia cuadráticas
Tabla = NULL
for(i in 0:5) {
Modelo_p2_0 = Arima(inflacion, order = c(1,0,i), xreg = tend2, include.mean = F)
Tabla_t = data.frame(Orden = c(paste0("c(1,0,",i,")")),AIC = c(AIC(Modelo_p2_0)), BIC =c(BIC(Modelo_p2_0)))
Tabla = rbind(Tabla,Tabla_t)
}
xtable(Tabla)
Mejor_modelo = Tabla[which.min(Tabla$AIC),]
Mejor_modelo
#Probar distintos modelos AR con tendencia de Grado 4
Mejor_Modelo_0 = Arima(inflacion, order = c(1,0,0), include.mean = F,xreg = tend2)
Tabla = NULL
for(i in 0:5) {
Modelo_p2_0 = Arima(inflacion, order = c(i,0,0), xreg = tend3, include.mean = F)
Tabla_t = data.frame(Orden = c(paste0("c(",i,",0,0)")),AIC = c(AIC(Modelo_p2_0)), BIC =c(BIC(Modelo_p2_0)))
Tabla = rbind(Tabla,Tabla_t)
}
xtable(Tabla)
Mejor_modelo = Tabla[which.min(Tabla$AIC),]
Mejor_modelo
#Probar distintos modelos MA con tendencia de Grado 4
Tabla = NULL
for(i in 0:5) {
Modelo_p2_0 = Arima(inflacion, order = c(1,0,i), xreg = tend3, include.mean = F)
Tabla_t = data.frame(Orden = c(paste0("c(1,0,",i,")")),AIC = c(AIC(Modelo_p2_0)), BIC =c(BIC(Modelo_p2_0)))
Tabla = rbind(Tabla,Tabla_t)
}
xtable(Tabla)
Mejor_modelo = Tabla[which.min(Tabla$AIC),]
#Finalmente se concluye que el mejor modelo es un AR(1).
Mejor_Modelo = Arima(inflacion, order = c(1,0,0), xreg = tend1, include.mean = F)
Mejor_Modelo
tend1
# Punto 7. La serie de los residuales -------------------------------------
# Errores de la tendencia lineal ------------------------------------------
pdf(paste0(path, "Graficos/ResidualesTendencia.pdf"), width = 12, height = 8)
checkresiduals(modelo3.1$residuals)
dev.off()
checkresiduals(modelo3.1$residuals)
Normal_tabla = rbind(
Tabla_resumen_2(modelo3.1$residuals,nombre = "Lineal"),
Tabla_resumen_2(modelo3.2$residuals,nombre = "Grado 2"),
Tabla_resumen_2(modelo3.3$residuals,nombre = "Grado 4"))
xtable(Normal_tabla)
#Predicción en la muestra
pdf(paste0(path, "Graficos/PronosticosInMuestraFinal.pdf"), width = 14, height = 8)
par(mfrow=c(1,3), mar=c(3, 4, 2, 2) )
### ------ Lineal : Prónostico en la muestra --- ###
modelo3.1.1<-Arima(window(inflacion, end=c(2017,2)), order = c(1,0,0),xreg = window(tend1, end=c(2017,2)),include.mean = F)
pron_insample<-forecast(modelo3.1.1, h=12, xreg =  window(tend1, start=c(2017, 2)))
plot(pron_insample, showgap = F, main="Lineal", ylab="Inflación",cex.lab=2.5, cex.axis=2.5, cex.main=2.5, cex.sub=2.5)
lines(window(inflacion, start=c(2017,2)), col="red")
### ------ Grado 2: Prónostico en la muestra --- ###
modelo3.1.2<-Arima(window(inflacion, end=c(2017,2)), order = c(1,0,0),xreg = window(tend2, end=c(2017,2)),include.mean = F)
pron_insample<-forecast(modelo3.1.2, h=12, xreg =  window(tend2, start=c(2017, 2)))
plot(pron_insample, showgap = F, main="Polinomio (Grado 2)", ylab="Inflación",cex.lab=2.5, cex.axis=2.5, cex.main=2.5, cex.sub=2.5)
lines(window(inflacion, start=c(2017,2)), col="red")
### ------ Grado 4 : Prónostico en la muestra --- ###
modelo3.1.3<-Arima(window(inflacion, end=c(2017,2)), order = c(1,0,0),xreg = window(tend3, end=c(2017,2)),include.mean = F)
pron_insample<-forecast(modelo3.1.3, h=12, xreg =  window(tend3, start=c(2017, 2)))
plot(pron_insample, showgap = F, main="Polinomio (Grado 4)", ylab="Inflación",cex.lab=2.5, cex.axis=2.5, cex.main=2.5, cex.sub=2.5)
lines(window(inflacion, start=c(2017,2)), col="red")
dev.off()
# Pronóstico fuera de la muestra: Lineal ----------------------------------
Horizonte=12
tendencia_fuera = ts(cbind(t=(length(inflacion)+1):(length(inflacion)+Horizonte)),start=c(2018,3), frequency = 12)
TE_1f<-seasonaldummy(tendencia_fuera)
TE_1f<-cbind(TE_1f, Dec=apply(TE_1f, MARGIN = 1, function(x){1-sum(x)}))
TE_1f<-ts(cbind(TE_1f,tendencia_fuera), start=c(2018, 3), frequency = 12)
colnames(TE_1f)<-colnames(tend1)
Pronostico = forecast(modelo3.1, h=Horizonte, xreg =  TE_1f)
pdf(paste0(path, "Graficos/PronosticosOutMuestraFinal.pdf"), width = 14, height = 8)
plot(Pronostico, showgap = F, xlim=c(2003, 2020))
TE_1f
# Pronóstico fuera de la muestra: Lineal ----------------------------------
Horizonte=12
tendencia_fuera = ts(cbind(t=(length(inflacion)+1):(length(inflacion)+Horizonte)),start=c(2018,3), frequency = 12)
TE_1f<-seasonaldummy(tendencia_fuera)
TE_1f<-cbind(TE_1f, Dec=apply(TE_1f, MARGIN = 1, function(x){1-sum(x)}))
TE_1f<-ts(cbind(TE_1f,tendencia_fuera), start=c(2018, 3), frequency = 12)
colnames(TE_1f)<-colnames(tend1)
Pronostico = forecast(modelo3.1, h=Horizonte, xreg =  TE_1f)
pdf(paste0(path, "Graficos/PronosticosOutMuestraFinal.pdf"), width = 14, height = 8)
plot(Pronostico, showgap = F, xlim=c(2003, 2020))
dev.off()
summary(Pronostico)
Pronostico
### ------ Grado 4 : Prónostico en la muestra --- ###
modelo3.1.3<-Arima(window(inflacion, end=c(2017,2)), order = c(1,0,0),xreg = window(tend3, end=c(2017,2)),include.mean = F)
inflacion
tend3
inflacion
window(inflacion, end=c(2019,9))
window(inflacion, end=c(2019,9))
window(inflacion, end=c(2019,9))
tend3
tail
tail(tend3)
Construccion_dummys(inflacion, 2003, 1, Grado= 4)
# Pronóstico fuera de la muestra: Lineal ----------------------------------
Horizonte=12
tendencia_fuera = ts(cbind(t=(length(inflacion)+1):(length(inflacion)+Horizonte)),start=c(2018,3), frequency = 12)
tendencia_fuera
# Pronóstico fuera de la muestra: Lineal ----------------------------------
Horizonte=60
tendencia_fuera = ts(cbind(t=(length(inflacion)+1):(length(inflacion)+Horizonte)),start=c(2018,3), frequency = 12)
tendencia_fuera
tendencia_fuera = ts(cbind(t=(length(inflacion)+1):(length(inflacion)+Horizonte)),start=c(2019,9), frequency = 12)
tendencia_fuera
TE_1f<-seasonaldummy(tendencia_fuera)
TE_1f<-cbind(TE_1f, Dec=apply(TE_1f, MARGIN = 1, function(x){1-sum(x)}))
TE_1f<-ts(cbind(TE_1f,tendencia_fuera), start=c(2019, 9), frequency = 12)
colnames(TE_1f)<-colnames(tend1)
Pronostico = forecast(modelo3.1, h=Horizonte, xreg =  TE_1f)
Pronostico
plot(Pronostico, showgap = F, xlim=c(2003, 2020))
plot(Pronostico, showgap = F, xlim=c(2003, 2025))
Pronostico
Pronostico$mean
dim(Pronostico$mean)
length(Pronostico$mean)
write(Pronostico$mean,file = '/Users/germangonzalez/Dropbox (Quantil)/Caribe/Codigos/Econometría/Pronosticos')
write.csv(Pronostico$mean,file = '/Users/germangonzalez/Dropbox (Quantil)/Caribe/Codigos/Econometría/Pronosticos')
write.csv(Pronostico$mean,file = '/Users/germangonzalez/Dropbox (Quantil)/Caribe/Codigos/Econometría/Pronosticos/inflacion.csc')
write.csv(Pronostico$mean,file = '/Users/germangonzalez/Dropbox (Quantil)/Caribe/Codigos/Econometría/Pronosticos/inflacion.cvc')
write.csv(Pronostico$mean,file = '/Users/germangonzalez/Dropbox (Quantil)/Caribe/Codigos/Econometría/Pronosticos/inflacion.csv')
ln(-20)
ln(1)
log(70000)
log(-40000)
0.5*100000+ 0.5*70000
0.5*100000+ 0.5*40000
0.5*100000+ 0.5*50000
0.5*ln(100000)+ 0.5*ln(50000)
0.5*log(100000)+ 0.5*log(50000)
load(/Users/germangonzalez/Dropbox (Quantil)/Scotia/Codigos/Base de datos/Tuits/En/Compilado palabras del 2019-01-11.RData)
load('/Users/germangonzalez/Dropbox (Quantil)/Scotia/Codigos/Base de datos/Tuits/En/Compilado palabras del 2019-01-11.RData')
Palabras_nube
# ---------------------------------------------------------------------------------------------------------------------- #
# # ------------------------------------------- 125 Cuentas  ------------------------------------------- #
A1 = rtweet::search_tweets("from:@BBVAResearch OR from:@bespokeinvest OR from:@blackrock OR from:@bondvigilantes OR from:@CivicScience OR from:@clearpthcapital OR from:@ColumbiaMgmt OR from:@CowenResearch OR from:@csresearch OR from:@Dealogic OR from:@EU_Eurostat OR from:@FactSet OR from:@GaveKalCapital OR from:@GuggenheimPtnrs OR from:@LPLResearch OR from:@MarkitEconomics OR from:@MStarETFUS OR from:@muddywatersre OR from:@NDR_Research OR from:@Open_Markets OR from:@PictetWM OR from:@RA_Insights" ,n=10000)
load('/Users/germangonzalez/Dropbox (Quantil)/PartidoU/Estadisticas/Twitter/Tuits/Tuits del 2017-10-24.RData')
Data_total
View(Data_total)
library('readxls')
library('readxl')
read_excel('/Users/germangonzalez/Documents/Serie_volumen.xlsx')
Datos=read_excel('/Users/germangonzalez/Documents/Serie_volumen.xlsx')
Datos=as.data.frame(read_excel('/Users/germangonzalez/Documents/Serie_volumen.xlsx'))
Datos
library('readxl')
Datos=as.data.frame(read_excel('/Users/germangonzalez/Documents/Serie_volumen.xlsx'))
ts(data = Datos)
library('readxl')
Datos=as.data.frame(read_excel('/Users/germangonzalez/Documents/Serie_volumen.xlsx'))
Datos
Datos[,1]
as.Date(Datos[,1])
ts(data = Datos$Valor,frequency = as.Date(Datos[,1]))
xts(data = Datos$Valor,order.by = as.Date(Datos[,1]))
xts::xts(data = Datos$Valor,order.by = as.Date(Datos[,1]))
xts::xts(Datos$Valor,frequency = as.Date(Datos[,1]))
as.Date(Datos[,1])
xts::xts(x = Datos$Valor,frequency = as.Date(Datos[,1]))
xts::xts(x = Datos$Valor,order.by = as.Date(Datos[,1]))
Serie = xts::xts(x = Datos$Valor,order.by = as.Date(Datos[,1]))
library(forecast)
auto.arima(Serie)
auto.arima(Serie)
auto.arima(Serie,stepwise = F,approximation = F)
plot(Serie)
diff(Serie)
library(forecast)
library(timeSeries)
returns(Serie,method='Simple')
returns(Serie,method='simple')
auto.arima(returns(Serie,method='simple'))
returns(Serie,method='simple')
Retornos = returns(Serie,method='simple')
plot(Retornos)
Retornos = diff(Serie)
Retornos
plot(Retornos)
auto.arima(Retornos)
Retornos
Retornos = diff(Serie)[-1]
Retornos
auto.arima(Retornos)
auto.arima(Retornos,approximation = F,stepwise = F)
auto.arima(Retornos,approximation = F,stepwise = F,allowmean = F)
auto.arima(Retornos,approximation = F,stepwise = F,allowmean = T)
Retornos
load('/Users/germangonzalez/Documents/Dolares.xlsx')
library(readxl)
read_excel('/Users/germangonzalez/Documents/Dolares.xlsx')
excel = read_excel('/Users/germangonzalez/Documents/Dolares.xlsx')
excel
excel$Dolares
plot(excel$Dolares)
plot(excel$Dolares,type='l')
diff(excel$Dolares,type='')
diff(excel$Dolares)
lot
plot(diff(excel$Dolares),type = 'l')
shiny::runApp('Dropbox (Quantil)/Home Center/homecenter/Shiny/QuantRisk/inst/application')
sessionInfo()
###### --------------------- Ejercicio 1: Optimizacion restringida ----------------- ############
####### ----------- Limpiar ambiente ------- ######
rm(list = ls())
options(scipen = 10000000)
##### --------- Path: automatico  --------- #####
path <<- gsub(rstudioapi::getActiveDocumentContext()$path,pattern = "/Ejercicio 1.+",replacement = "")
setwd(paste0(path,'/Ejercicio 1'))
##### -------- librerias ------- ######
librerias <- c("readxl","ggplot2","scales",'timeSeries','timeSeries','forecast','rugarch','fBasics','moments','tseries','PortfolioAnalytics','dplyr','zoo','plotly','PortfolioAnalytics','ROI','ROI.plugin.quadprog','ROI.plugin.glpk')
###### ----- Instalacion liberarias ------ ####
if(length(setdiff(librerias, rownames(installed.packages()))) > 0){
install.packages(setdiff(librerias, rownames(installed.packages())))}
invisible(sapply(librerias, require, character.only = TRUE,quietly = TRUE))
###### ----------- Cargar datos --------- #######
##### ------- Historia Colcap ------ ########
Datos_mercado = as.data.frame(read_excel('Datos.xlsx'))
Fechas_originales = Datos_mercado[,"Fecha"]
Datos_mercado = Datos_mercado[,-1]
#### ----- Volver numerico todo ----- ####
Datos_mercado = apply(Datos_mercado, 2, as.numeric)
##### ---- Eliminar Na ------- ######
Datos_mercado = na.locf(Datos_mercado)
#### ------ Retornos simples ------ ####
Datos_mercado = apply(Datos_mercado, 2, function(x){returns(x,method='simple')})[-1,]
Datos_mercado = as.data.frame(Datos_mercado)
rownames(Datos_mercado) = Fechas_originales[-1]
############ ------------------ Optimizacion 1:  ----------------- ##########
#### --------- Especificacion del portafolio -------- #######
Especificacion_portafolio <- portfolio.spec(colnames(Datos_mercado))
### ----- Restriccion 1: Solo largo ---- ####
Especificacion_portafolio <- add.constraint(portfolio = Especificacion_portafolio, type= "long_only")
### ----- Restriccion 2: la suma siempre debe ser 1 ---- ####
Especificacion_portafolio <- add.constraint(portfolio = Especificacion_portafolio, type = "weight_sum", min_sum = 1, max_sum = 1)
###### ------- Objetivo optimizacion -------- ######
# Objetivo 1: Maximizar el retorno
Especificacion_portafolio <- add.objective(portfolio = Especificacion_portafolio,
type = "return",
name = "mean")
# Objetivo 1: Minimizar el restorno el retorno
Especificacion_portafolio <- add.objective(portfolio = Especificacion_portafolio,
type = "risk",
name = "StdDev")
######### ------------- Optimizacion ----------- #########
Resultados_optmizacion <- optimize.portfolio(Datos_mercado, portfolio = Especificacion_portafolio,
optimize_method = "random",
trace=TRUE)
#### --------- Pesos -------- #####
print(Resultados_optmizacion$weights)
#### --------- Optimizacion -------- #####
Resultados_optmizacion$opt_values
###### --------------- Resultados ------------ #######
chart.RiskReward(Resultados_optmizacion, risk.col = "StdDev", return.col = "mean",
chart.assets = TRUE)
#### --------- Pesos -------- #####
print(Resultados_optmizacion$weights)
Pesos_optimos = as.matrix(Resultados_optmizacion$weights)
Retornos = as.matrix(Datos_mercado)
Resultados = Retornos%*%(Pesos_optimos)
#### ----- Resultados de la optimizacion ------ #####
Retornos_esperados = round(mean(Resultados),6)
### Percentil
Percentil_95 = quantile(Resultados,p=c(0.95))
#### --------- Pesos -------- #####
print(Resultados_optmizacion$weights)
#### --------- Optimizacion -------- #####
Resultados_optmizacion$opt_values
###### --------------- Resultados ------------ #######
chart.RiskReward(Resultados_optmizacion, risk.col = "StdDev", return.col = "mean",
chart.assets = TRUE)
#### --------- Pesos -------- #####
print(Resultados_optmizacion$weights)
Pesos_optimos = as.matrix(Resultados_optmizacion$weights)
Retornos = as.matrix(Datos_mercado)
Resultados = Retornos%*%(Pesos_optimos)
#### ----- Resultados de la optimizacion ------ #####
Retornos_esperados = round(mean(Resultados),6)
### Percentil
Percentil_95 = quantile(Resultados,p=c(0.95))
############ ------------------ Optimizacion 2: ----------------- ########
# Objetivo: Encontrar el portafolio de minima varianza sujeto a E[r] = 0.0002
#### --------- Especificacion del portafolio -------- #######
Especificacion_portafolio <- portfolio.spec(colnames(Datos_mercado))
### ----- Restriccion 1: Solo largo ---- ####
Especificacion_portafolio <- add.constraint(portfolio = Especificacion_portafolio, type= "long_only")
### ----- Restriccion 2: la suma siempre debe ser 1 ---- ####
Especificacion_portafolio <- add.constraint(portfolio = Especificacion_portafolio, type = "weight_sum", min_sum = 1, max_sum = 1)
### ----- Restriccion 3: Retorno esperado ---- ####
Especificacion_portafolio <- add.constraint(portfolio=Especificacion_portafolio, type="return", return_target=0.0002)
###### ------- Objetivo optimizacion -------- ######
# Objetivo 1: Maximizar el retorno
Especificacion_portafolio <- add.objective(portfolio = Especificacion_portafolio,
type = "return",
name = "mean")
# Objetivo 1: Minimizar el restorno el retorno
Especificacion_portafolio <- add.objective(portfolio = Especificacion_portafolio,
type = "risk",
name = "StdDev")
######### ------------- Optimizacion ----------- #########
Resultados_optmizacion <- optimize.portfolio(Datos_mercado, portfolio = Especificacion_portafolio,
optimize_method = "random",
trace=TRUE)
#### --------- Optimizacion -------- #####
Resultados_optmizacion$opt_values
###### --------------- Resultados ------------ #######
chart.RiskReward(Resultados_optmizacion, risk.col = "StdDev", return.col = "mean",
chart.assets = TRUE)
