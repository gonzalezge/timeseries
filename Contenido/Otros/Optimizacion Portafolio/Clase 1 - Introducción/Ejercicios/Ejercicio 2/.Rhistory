Historia_precios = as.matrix(Historia_precios)
#### ---- Vector de las empresas ---- ####
Vector_de_empresas = colnames(Historia_precios)
####### -------------- Portafolio de inversion: -------------- #######
Portafolio_acciones = as.data.frame(read_excel('Portafolio.xlsx'))
##### ---- Se crea una columna del valor de la accion ---- #####
Portafolio_acciones$Valor = 0
#### ----- Se pone el nombre de las acciones a las filas ----- ####
rownames(Portafolio_acciones) = Portafolio_acciones$Empresa
#### ----- Se elimina el vector de acciones ---- ###
Portafolio_acciones = Portafolio_acciones[,-1]
###### ----------- Paso 2: Valor del portafolio ---------- #######
### ------ Ultimo precio ------ ###
Ultimo_precio = Historia_precios[dim(Historia_precios)[1],]
###### --------- Valor portafolio: Unidades por ultimo dato ------ #####
Portafolio_acciones$Valor = Portafolio_acciones[Vector_de_empresas,"Acciones"]*Ultimo_precio
Valor_total_portafolio = sum(Portafolio_acciones$Valor)
print(paste0('El valor total del portafolio es de $', format(Valor_total_portafolio,big.mark=",",scientific=FALSE) , ' pesos'))
###### ---------- Paso 3: Calculo de Retornos historicos ------- ######
#### ----- Plazo de los retornos a un dia #######
Retornos_historicos = apply(Historia_precios, 2, function(x){returns(x,method = 'simple')})
####### ----------- Limpiar ambiente ------- ######
rm(list = ls())
##### --------- Path: automatico  --------- #####
path <<- gsub(rstudioapi::getActiveDocumentContext()$path,pattern = "/Ejercicio 1.+",replacement = "")
setwd(paste0(path,'/Ejercicio 1'))
##### -------- librerias ------- ######
librerias <- c("readxl","ggplot2","scales",'timeSeries','timeSeries','forecast','rugarch','fBasis','moments')
###### ----- Instalacion liberarias ------ ####
if(length(setdiff(librerias, rownames(installed.packages()))) > 0){
install.packages(setdiff(librerias, rownames(installed.packages())))}
invisible(sapply(librerias, require, character.only = TRUE,quietly = TRUE))
### ------ Ejercicio 1: Gráficar distribuciones sacar percentiles, media, varianza, Asimetria y kurtosis.
#### --------- Normal --------- #######
####### ---  Miles/(US) gallon ----- ########
ggplot(data = mtcars, aes(x = mpg)) +
geom_histogram(aes(y = ..density.., fill = ..count..)) +
scale_fill_gradient(low = "#DCDCDC", high = "#7C7C7C") +
stat_function(fun = dnorm, colour = "blue",
args = list(mean = mean(mtcars$mpg),
sd = sd(mtcars$mpg))) +
ggtitle("Histograma + curva normal teórica") +
theme_bw()
#### ------- Simulacion de datos normal --------- #######
Distribucion_normal = rnorm(mean = 1000,n = 1000,sd = 50)
#### ------- Simulacion de datos de una uniforme ------- ########
Distribucion_uniforme = runif(min = 0,max = 1,n = 1000)
####### ----------- Limpiar ambiente ------- ######
rm(list = ls())
##### --------- Path: automatico  --------- #####
path <<- gsub(rstudioapi::getActiveDocumentContext()$path,pattern = "/Ejercicio 1.+",replacement = "")
setwd(paste0(path,'/Ejercicio 1'))
##### -------- librerias ------- ######
librerias <- c("readxl","ggplot2","scales",'timeSeries','timeSeries','forecast','rugarch','fBasics','moments')
###### ----- Instalacion liberarias ------ ####
if(length(setdiff(librerias, rownames(installed.packages()))) > 0){
install.packages(setdiff(librerias, rownames(installed.packages())))}
invisible(sapply(librerias, require, character.only = TRUE,quietly = TRUE))
### ------ Ejercicio 1: Gráficar distribuciones sacar percentiles, media, varianza, Asimetria y kurtosis.
#### --------- Normal --------- #######
####### ---  Miles/(US) gallon ----- ########
ggplot(data = mtcars, aes(x = mpg)) +
geom_histogram(aes(y = ..density.., fill = ..count..)) +
scale_fill_gradient(low = "#DCDCDC", high = "#7C7C7C") +
stat_function(fun = dnorm, colour = "blue",
args = list(mean = mean(mtcars$mpg),
sd = sd(mtcars$mpg))) +
ggtitle("Histograma + curva normal teórica") +
theme_bw()
#### ------- Simulacion de datos normal --------- #######
Distribucion_normal = rnorm(mean = 1000,n = 1000,sd = 50)
#### ------- Simulacion de datos de una uniforme ------- ########
Distribucion_uniforme = runif(min = 0,max = 1,n = 1000)
#### ---------- Tipo de Gráfico: Distribucion --------- ########
## frecuencia de los valores representados por medio de barras
## ------ Histograma Distribucion normal ----- #####
hist(Distribucion_normal)
## ------ Histograma Distribucion uniforme ----- #####
hist(Distribucion_uniforme)
### --------- Carros -------- #####
qqnorm(mtcars$mpg, pch = 19, col = "gray50")
qqline(mtcars$mpg)
### --------- Simulada normal -------- ######
qqnorm(Distribucion_normal, pch = 19, col = "gray50")
qqline(Distribucion_normal)
### --------- Simulada uniforme -------- ######
qqnorm(Distribucion_uniforme, pch = 19, col = "gray50")
qqline(Distribucion_uniforme)
### --------- Simulada uniforme -------- ######
qqnorm(Distribucion_uniforme, pch = 19, col = "gray50")
qqline(Distribucion_uniforme)
#### ------- Simulacion de datos de una uniforme ------- ########
Distribucion_uniforme = runif(min = -3,max = 3,n = 1000)
#### ---------- Tipo de Gráfico: Distribucion --------- ########
## frecuencia de los valores representados por medio de barras
## ------ Histograma Distribucion normal ----- #####
hist(Distribucion_normal)
## ------ Histograma Distribucion uniforme ----- #####
hist(Distribucion_uniforme)
### --------- Carros -------- #####
qqnorm(mtcars$mpg, pch = 19, col = "gray50")
qqline(mtcars$mpg)
### --------- Simulada normal -------- ######
qqnorm(Distribucion_normal, pch = 19, col = "gray50")
qqline(Distribucion_normal)
### --------- Simulada uniforme -------- ######
qqnorm(Distribucion_uniforme, pch = 19, col = "gray50")
qqline(Distribucion_uniforme)
#####------ Media ----- #######
### --------- Carros -------- #####
mean(mtcars$mpg)
### --------- Distribucion_normal -------- #####
mean(Distribucion_normal)
### --------- Simulada uniforme -------- ######
mean(Distribucion_uniforme)
#####------ Media ----- #######
### --------- Carros -------- #####
mean(mtcars$mpg)
### --------- Distribucion_normal -------- #####
mean(Distribucion_normal)
### --------- Simulada uniforme -------- ######
mean(Distribucion_uniforme)
sd(mtcars$mpg)
#### ------- Simulacion de datos normal --------- #######
Distribucion_normal = rnorm(mean = 20,n = 1000,sd = 6)
#### ------- Simulacion de datos de una uniforme ------- ########
Distribucion_uniforme = runif(min = -3,max = 3,n = 1000)
#### ---------- Tipo de Gráfico: Distribucion --------- ########
## frecuencia de los valores representados por medio de barras
## ------ Histograma Distribucion normal ----- #####
hist(Distribucion_normal)
## ------ Histograma Distribucion uniforme ----- #####
hist(Distribucion_uniforme)
### --------- Carros -------- #####
qqnorm(mtcars$mpg, pch = 19, col = "gray50")
qqline(mtcars$mpg)
### --------- Simulada normal -------- ######
qqnorm(Distribucion_normal, pch = 19, col = "gray50")
qqline(Distribucion_normal)
### --------- Simulada uniforme -------- ######
qqnorm(Distribucion_uniforme, pch = 19, col = "gray50")
qqline(Distribucion_uniforme)
#####------ Media ----- #######
### --------- Carros -------- #####
mean(mtcars$mpg)
### --------- Distribucion_normal -------- #####
mean(Distribucion_normal)
### --------- Simulada uniforme -------- ######
mean(Distribucion_uniforme)
range(mtcars$mpg)
#### ------- Simulacion de datos de una uniforme ------- ########
Distribucion_uniforme = runif(min = 10.4,max = 33.9,n = 1000)
#### ---------- Tipo de Gráfico: Distribucion --------- ########
## frecuencia de los valores representados por medio de barras
## ------ Histograma Distribucion normal ----- #####
hist(Distribucion_normal)
## ------ Histograma Distribucion uniforme ----- #####
hist(Distribucion_uniforme)
### --------- Carros -------- #####
qqnorm(mtcars$mpg, pch = 19, col = "gray50")
qqline(mtcars$mpg)
### --------- Simulada normal -------- ######
qqnorm(Distribucion_normal, pch = 19, col = "gray50")
qqline(Distribucion_normal)
### --------- Simulada uniforme -------- ######
qqnorm(Distribucion_uniforme, pch = 19, col = "gray50")
qqline(Distribucion_uniforme)
#####------ Media ----- #######
### --------- Carros -------- #####
mean(mtcars$mpg)
### --------- Distribucion_normal -------- #####
mean(Distribucion_normal)
### --------- Simulada uniforme -------- ######
mean(Distribucion_uniforme)
#####------ Varianza ----- #######
######## --------- Construir una funcion ------- ######
varianza <- function (x){
Numerador = sum((x-mean(x))^2)
Denominador = (length(x)-1)
Resultado= Numerador/Denominador
return(Resultado)
}
#####------ Varianza ----- #######
### --------- Carros -------- #####
varianza(mtcars$mpg)
### --------- Distribucion_normal -------- #####
varianza(Distribucion_normal)
### --------- Simulada uniforme -------- ######
varianza(Distribucion_uniforme)
### --------- Comprobacion con funcion de R -------- #####
### --------- Carros -------- #####
sd(mtcars$mpg)^2
### --------- Distribucion_normal -------- #####
sd(Distribucion_normal)^2
### --------- Simulada uniforme -------- ######
sd(Distribucion_uniforme)^2
### --------- Desviacion -------- #####
### --------- Carros -------- #####
sd(mtcars$mpg)
### --------- Distribucion_normal -------- #####
sd(Distribucion_normal)
### --------- Simulada uniforme -------- ######
sd(Distribucion_uniforme)
#### ------ Percentiles ------- ######
### --------- Carros -------- #####
quantile(mtcars$mpg)
### --------- Distribucion_normal -------- #####
quantile(Distribucion_normal)
### --------- Simulada uniforme -------- ######
quantile(Distribucion_uniforme)
########## --------- Estadisticas en un solo comando --------- ##########
### --------- Carros -------- #####
summary(mtcars$mpg)
### --------- Distribucion_normal -------- #####
summary(Distribucion_normal)
### --------- Simulada uniforme -------- ######
quantile(Distribucion_uniforme)
########## --------- Estadisticas en un solo comando --------- ##########
### --------- Carros -------- #####
summary(mtcars$mpg)
### --------- Distribucion_normal -------- #####
summary(Distribucion_normal)
### --------- Simulada uniforme -------- ######
summary(Distribucion_uniforme)
####### ------------------- Asimetria -------------- #########
# Permite identificar y describir la manera como los datos tiende
# a reunirse de acuerdo con la frecuencia con que se hallen dentro de la distribución.
# Permite identificar las características de la distribución de datos sin necesidad de generar el gráfico.
# Valores cercanos a cero implica que la distribución es simétrica.
### --------- Carros -------- #####
skewness(mtcars$mpg)
### --------- Distribucion_normal -------- #####
skewness(Distribucion_normal)
### --------- Simulada uniforme -------- ######
skewness(Distribucion_uniforme)
####### ------------------- Curtosis - Apuntamiento -------------- #########
# Mayor curtosis implica una mayor concentración de valores de la variable
# muy cerca de la media de la distribución (pico) y muy lejos de la misma (colas),
### --------- Carros -------- #####
kurtosis(mtcars$mpg)
### --------- Distribucion_normal -------- #####
kurtosis(Distribucion_normal)
### --------- Simulada uniforme -------- ######
kurtosis(Distribucion_uniforme)
### ------ Ejercicio 1: Gráficar distribuciones sacar percentiles, media, varianza, Asimetria y kurtosis.
#### --------- Normal --------- #######
####### ---  Miles/(US) gallon ----- ########
ggplot(data = mtcars, aes(x = mpg)) +
geom_histogram(aes(y = ..density.., fill = ..count..)) +
scale_fill_gradient(low = "#DCDCDC", high = "#7C7C7C") +
stat_function(fun = dnorm, colour = "blue",
args = list(mean = mean(mtcars$mpg),
sd = sd(mtcars$mpg))) +
ggtitle("Histograma + curva normal teórica") +
theme_bw()
hist(mtcars$mpg)
### ------ Ejercicio 1: Gráficar distribuciones sacar percentiles, media, varianza, Asimetria y kurtosis.
#### --------- Normal --------- #######
####### ---  Miles/(US) gallon ----- ########
ggplot(data = mtcars, aes(x = mpg)) +
geom_histogram(aes(y = ..density.., fill = ..count..)) +
scale_fill_gradient(low = "#DCDCDC", high = "#7C7C7C") +
stat_function(fun = dnorm, colour = "blue",
args = list(mean = mean(mtcars$mpg),
sd = sd(mtcars$mpg))) +
ggtitle("Histograma + curva normal teórica") +
theme_bw()
#### ------- Simulacion de datos normal --------- #######
Distribucion_normal = rnorm(mean = 20,n = 1000,sd = 6)
#### ------- Simulacion de datos de una uniforme ------- ########
Distribucion_uniforme = runif(min = 10.4,max = 33.9,n = 1000)
#### ---------- Tipo de Gráfico: Distribucion --------- ########
## frecuencia de los valores representados por medio de barras
## ------ Histograma Distribucion normal ----- #####
hist(Distribucion_normal)
## ------ Histograma Distribucion uniforme ----- #####
hist(Distribucion_uniforme)
### --------- Carros -------- #####
qqnorm(mtcars$mpg, pch = 19, col = "gray50")
qqline(mtcars$mpg)
### --------- Carros -------- #####
qqnorm(mtcars$mpg, pch = 3, col = "gray50")
### --------- Simulada normal -------- ######
qqnorm(Distribucion_normal, pch = 19, col = "gray50")
qqline(Distribucion_normal)
### --------- Simulada uniforme -------- ######
qqnorm(Distribucion_uniforme, pch = 19, col = "gray50")
qqline(Distribucion_uniforme)
#####------ Media ----- #######
### --------- Carros -------- #####
mean(mtcars$mpg)
### --------- Distribucion_normal -------- #####
mean(Distribucion_normal)
### --------- Simulada uniforme -------- ######
mean(Distribucion_uniforme)
#####------ Varianza ----- #######
######## --------- Construir una funcion ------- ######
varianza <- function (x){
Numerador = sum((x-mean(x))^2)
Denominador = (length(x)-1)
Resultado= Numerador/Denominador
return(Resultado)
}
#####------ Varianza ----- #######
### --------- Carros -------- #####
varianza(mtcars$mpg)
### --------- Distribucion_normal -------- #####
varianza(Distribucion_normal)
### --------- Simulada uniforme -------- ######
varianza(Distribucion_uniforme)
### --------- Comprobacion con funcion de R -------- #####
### --------- Carros -------- #####
sd(mtcars$mpg)^2
### --------- Distribucion_normal -------- #####
sd(Distribucion_normal)^2
### --------- Simulada uniforme -------- ######
sd(Distribucion_uniforme)^2
### --------- Desviacion -------- #####
### --------- Carros -------- #####
sd(mtcars$mpg)
### --------- Distribucion_normal -------- #####
sd(Distribucion_normal)
### --------- Simulada uniforme -------- ######
sd(Distribucion_uniforme)
#### ------ Percentiles ------- ######
### --------- Carros -------- #####
quantile(mtcars$mpg)
### --------- Distribucion_normal -------- #####
quantile(Distribucion_normal)
### --------- Simulada uniforme -------- ######
quantile(Distribucion_uniforme)
########## --------- Estadisticas en un solo comando --------- ##########
### --------- Carros -------- #####
summary(mtcars$mpg)
### --------- Distribucion_normal -------- #####
summary(Distribucion_normal)
### --------- Simulada uniforme -------- ######
summary(Distribucion_uniforme)
####### ----------- Limpiar ambiente ------- ######
rm(list = ls())
##### --------- Path: automatico  --------- #####
path <<- gsub(rstudioapi::getActiveDocumentContext()$path,pattern = "/Ejercicio 2.+",replacement = "")
setwd(paste0(path,'/Ejercicio 2'))
##### -------- librerias ------- ######
librerias <- c("readxl","ggplot2","scales",'timeSeries','timeSeries','forecast','rugarch','fBasis')
###### ----- Instalacion liberarias ------ ####
if(length(setdiff(librerias, rownames(installed.packages()))) > 0){
install.packages(setdiff(librerias, rownames(installed.packages())))}
invisible(sapply(librerias, require, character.only = TRUE,quietly = TRUE))
###### ----------- Precios acciones ---------- #####
Historia_precios = as.data.frame(read_excel('Historia.xlsx'))
## ----- Organice los datos
Historia_precios = Historia_precios[-c(1,3),-c(1,2)]
## -- Ponga el nombre de las columnas -- ##
colnames(Historia_precios) = Historia_precios[1,]
#### ------ Elimine la primera fila de nombres ------ ###
Historia_precios = Historia_precios[-1,]
#### ----- Todo numerico ----- ####
Historia_precios = as.data.frame(apply(Historia_precios, 2, as.numeric))
#### ----- Arregle el formato de fechas ---- ######
Historia_precios$Fecha = as.Date(Historia_precios$Fecha,origin = "1899-12-30")
#### ----- Modificar el nombre de las filas con las fechas ------ ####
rownames(Historia_precios) =  Historia_precios$Fecha
#### ------- Eliminar fila de fecha ------ ####
Historia_precios = Historia_precios[,-c(1)]
Historia_precios = as.matrix(Historia_precios)
###------  Simples ------ ##
Retornos_simples = function(Valores){
### ------ Retorno simple (Pt-Pt-1)/(Pt-1) ----- #####
Resultado= diff(Valores)/Valores[-length(Valores)]
return(Resultado)
}
###------  Simples ------ ##
Retornos_log = function(Valores){
###
### ------ Retorno simple (Pt-Pt-1)/(Pt-1) ----- #####
Resultado= log(Valores[-1]/Valores[-length(Valores)])
return(Resultado)
}
### ----------- Retornos simples ---------- ###
Retornos_manuales = apply(Historia_precios,2, Retornos_simples)
### ----------- Retornos Log ---------- ###
Retornos_manuales = apply(Historia_precios,2, Retornos_log)
### --------- Se extraen los retornos ----------- ###
Retornos = as.data.frame(apply(Historia_precios, 2, function(x){returns(x,method='simple')}))[-1,]
### ---------- Graficos ---------- ####
Serie = Retornos[,"Bancolombia"]
hist(Serie)
### --------- Simulada uniforme -------- ######
qqnorm(Serie, pch = 19, col = "gray50")
qqline(Serie)
######### ------------- Shapiro ----------- ############
# Este test se emplea para contrastar
# normalidad cuando el tamaño de la muestra es menor de 50.
# Para muestras grandes es equivalente al test de kolmogorov-Smirnov.
###### ------------ Normal ---------- #######
Simulacion_normal = rnorm(n=1000,mean = 100,sd = 10)
shapiro.test(x = Simulacion_normal)
###### ------------ Uniforme ---------- #######
Simulacion_uniforme = runif(n = 1000,min = 0,max = 1)
shapiro.test(x = Simulacion_uniforme)
####### ----------- Limpiar ambiente ------- ######
rm(list = ls())
##### --------- Path: automatico  --------- #####
path <<- gsub(rstudioapi::getActiveDocumentContext()$path,pattern = "/Ejercicio 2.+",replacement = "")
setwd(paste0(path,'/Ejercicio 2'))
##### -------- librerias ------- ######
librerias <- c("readxl","ggplot2","scales",'timeSeries','timeSeries','forecast','rugarch','fBasis')
###### ----- Instalacion liberarias ------ ####
if(length(setdiff(librerias, rownames(installed.packages()))) > 0){
install.packages(setdiff(librerias, rownames(installed.packages())))}
invisible(sapply(librerias, require, character.only = TRUE,quietly = TRUE))
####### --------- Etapa 1: Organizción de datos Insumos ---------- ######
### Defina Portafolio_acciones y asigne la informacion de Portafolio.xlsx
### Defina Historia_precios y asigne la informacion de Historia.xlsx
###### ----------- Precios acciones ---------- #####
Historia_precios = as.data.frame(read_excel('Historia.xlsx'))
## ----- Organice los datos
Historia_precios = Historia_precios[-c(1,3),-c(1,2)]
## -- Ponga el nombre de las columnas -- ##
colnames(Historia_precios) = Historia_precios[1,]
#### ------ Elimine la primera fila de nombres ------ ###
Historia_precios = Historia_precios[-1,]
#### ----- Todo numerico ----- ####
Historia_precios = as.data.frame(apply(Historia_precios, 2, as.numeric))
#### ----- Arregle el formato de fechas ---- ######
Historia_precios$Fecha = as.Date(Historia_precios$Fecha,origin = "1899-12-30")
#### ----- Modificar el nombre de las filas con las fechas ------ ####
rownames(Historia_precios) =  Historia_precios$Fecha
#### ------- Eliminar fila de fecha ------ ####
Historia_precios = Historia_precios[,-c(1)]
Historia_precios = as.matrix(Historia_precios)
############### ------------ Retornos -------------- #############
###------  Simples ------ ##
Retornos_simples = function(Valores){
### ------ Retorno simple (Pt-Pt-1)/(Pt-1) ----- #####
Resultado= diff(Valores)/Valores[-length(Valores)]
return(Resultado)
}
###------  Simples ------ ##
Retornos_log = function(Valores){
###
### ------ Retorno simple (Pt-Pt-1)/(Pt-1) ----- #####
Resultado= log(Valores[-1]/Valores[-length(Valores)])
return(Resultado)
}
### ----------- Retornos simples ---------- ###
Retornos_manuales = apply(Historia_precios,2, Retornos_simples)
### ----------- Retornos Log ---------- ###
Retornos_manuales = apply(Historia_precios,2, Retornos_log)
### --------- Se extraen los retornos ----------- ###
Retornos = as.data.frame(apply(Historia_precios, 2, function(x){returns(x,method='simple')}))[-1,]
### ---------- Graficos ---------- ####
Serie = Retornos[,"Bancolombia"]
hist(Serie)
####### ----------- Limpiar ambiente ------- ######
rm(list = ls())
##### --------- Path: automatico  --------- #####
path <<- gsub(rstudioapi::getActiveDocumentContext()$path,pattern = "/Ejercicio 2.+",replacement = "")
setwd(paste0(path,'/Ejercicio 2'))
##### -------- librerias ------- ######
librerias <- c("readxl","ggplot2","scales",'timeSeries','timeSeries','forecast','rugarch','fBasics')
###### ----- Instalacion liberarias ------ ####
if(length(setdiff(librerias, rownames(installed.packages()))) > 0){
install.packages(setdiff(librerias, rownames(installed.packages())))}
invisible(sapply(librerias, require, character.only = TRUE,quietly = TRUE))
####### --------- Etapa 1: Organizción de datos Insumos ---------- ######
### Defina Portafolio_acciones y asigne la informacion de Portafolio.xlsx
### Defina Historia_precios y asigne la informacion de Historia.xlsx
###### ----------- Precios acciones ---------- #####
Historia_precios = as.data.frame(read_excel('Historia.xlsx'))
## ----- Organice los datos
Historia_precios = Historia_precios[-c(1,3),-c(1,2)]
## -- Ponga el nombre de las columnas -- ##
colnames(Historia_precios) = Historia_precios[1,]
#### ------ Elimine la primera fila de nombres ------ ###
Historia_precios = Historia_precios[-1,]
#### ----- Todo numerico ----- ####
Historia_precios = as.data.frame(apply(Historia_precios, 2, as.numeric))
#### ----- Arregle el formato de fechas ---- ######
Historia_precios$Fecha = as.Date(Historia_precios$Fecha,origin = "1899-12-30")
#### ----- Modificar el nombre de las filas con las fechas ------ ####
rownames(Historia_precios) =  Historia_precios$Fecha
#### ------- Eliminar fila de fecha ------ ####
Historia_precios = Historia_precios[,-c(1)]
Historia_precios = as.matrix(Historia_precios)
############### ------------ Retornos -------------- #############
###------  Simples ------ ##
Retornos_simples = function(Valores){
### ------ Retorno simple (Pt-Pt-1)/(Pt-1) ----- #####
Resultado= diff(Valores)/Valores[-length(Valores)]
return(Resultado)
}
###------  Simples ------ ##
Retornos_log = function(Valores){
###
### ------ Retorno simple (Pt-Pt-1)/(Pt-1) ----- #####
Resultado= log(Valores[-1]/Valores[-length(Valores)])
return(Resultado)
}
### ----------- Retornos simples ---------- ###
Retornos_manuales = apply(Historia_precios,2, Retornos_simples)
### ----------- Retornos Log ---------- ###
Retornos_manuales = apply(Historia_precios,2, Retornos_log)
### --------- Se extraen los retornos ----------- ###
Retornos = as.data.frame(apply(Historia_precios, 2, function(x){returns(x,method='simple')}))[-1,]
### ---------- Graficos ---------- ####
Serie = Retornos[,"Bancolombia"]
hist(Serie)
### --------- Simulada uniforme -------- ######
qqnorm(Serie, pch = 19, col = "gray50")
qqline(Serie)
