#Son los links de descargade cada uno de los nodos "ON","1M", "3M", "6M".
#Si cambian los links hay que cambiar este vector
links = c("https://totoro.banrep.gov.co/analytics/saw.dll?Download&Format=excel2007&Extension=.xlsx&BypassCache=true&path=%2Fshared%2fSeries%20Estad%c3%adsticas_T%2F1.%20IBR%2F%201.1.IBR_Plazo%20overnight%20nominal%20para%20un%20rango%20de%20fechas%20dado%20IQY&lang=es&NQUser=publico&NQPassword=publico123&SyncOperation=1")
print(paste("Procesando ON"))
#se extraen los datos de la descarga
r = GET(links,
add_headers(
Host="totoro.banrep.gov.co",
`User-Agent`="Mozilla/5.0 (Windows NT 6.3; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0",
Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
`Accept-Language` = "es-ES,es;q=0.8,en-US;q=0.5,en;q=0.3",
`Accept-Encoding` = "gzip, deflate",
Connection = "keep-alive"
))
##### -------- librerias ------- ######
librerias <- c("dplyr","tidyr","xts",'ggplot2','scales','matrixStats','readxl','openxlsx','httr','lubridate','forecast')
set.seed(123)
###### ----- Instalacion paquetes ------ ####
if(length(setdiff(librerias, rownames(installed.packages()))) > 0){
install.packages(setdiff(librerias, rownames(installed.packages())))}
invisible(sapply(librerias, require, character.only = TRUE,quietly = TRUE))
#Son los links de descargade cada uno de los nodos "ON","1M", "3M", "6M".
#Si cambian los links hay que cambiar este vector
links = c("https://totoro.banrep.gov.co/analytics/saw.dll?Download&Format=excel2007&Extension=.xlsx&BypassCache=true&path=%2Fshared%2fSeries%20Estad%c3%adsticas_T%2F1.%20IBR%2F%201.1.IBR_Plazo%20overnight%20nominal%20para%20un%20rango%20de%20fechas%20dado%20IQY&lang=es&NQUser=publico&NQPassword=publico123&SyncOperation=1")
print(paste("Procesando ON"))
#se extraen los datos de la descarga
r = GET(links,
add_headers(
Host="totoro.banrep.gov.co",
`User-Agent`="Mozilla/5.0 (Windows NT 6.3; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0",
Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
`Accept-Language` = "es-ES,es;q=0.8,en-US;q=0.5,en;q=0.3",
`Accept-Encoding` = "gzip, deflate",
Connection = "keep-alive"
))
#se pasan a formato excel
bin = content(r, "raw")
archivo = "archivo.xlsx"
writeBin(bin, archivo)
#se leen
d = try(read.xlsx(archivo, sheet = 1, detectDates = T),silent=T)
d
####### ----------- Limpiar ambiente ------- ######
rm(list = ls())
##### -------- librerias ------- ######
librerias <- c("dplyr","tidyr","xts",'ggplot2','scales','matrixStats','readxl','openxlsx','httr','lubridate','forecast')
###### ----- Instalacion paquetes ------ ####
if(length(setdiff(librerias, rownames(installed.packages()))) > 0){
install.packages(setdiff(librerias, rownames(installed.packages())))}
invisible(sapply(librerias, require, character.only = TRUE,quietly = TRUE))
###### ---------- Parte 1: Manejo de datos -------- ######
1+2
2-2
a=2
a+a
a
b=4
a+b
b=1
#### ------- Vector numericos ------ #####
vector_numerico=c(2,4,6,8)
print(vector_numerico)
#### ------- Vector textos ------ #####
vector_texto=c("uno","dos","tres")
print(vector_texto)
#### ------- Vector logicos ------ #####
vector_logicos=c(TRUE,FALSE,TRUE)
print(vector_logicos)
vector_numerico[1]
vector_numerico[4]
vector_numerico[1:3]
vector_numerico[-2]
vector_numerico[c(1,3)]
vector_numerico[-c(1,3)]
#### ------- Matrices  ------ #####
matriz=matrix(data=c(2,3,5,0,0,1,1,0,1),nrow = 3,ncol=3)
det(matriz)
diag(matriz)
matriz2=matrix(data=c(1,1,1,0,2,1,1,1,0),nrow = 3,ncol=3)
#### ------- Multiplicacion matricial  ------ #####
matriz%*%matriz2
matriz[1,2]
matriz[1:2,3]
matriz[1,]
matriz[c(1,3),c(2,3)]
#### ------- DataFrames  ------ #####
a=c(1,2,3)
b=c(2,3,4)
c=c(3,4,5)
df=data.frame(a,b,c)
print(df)
###--- Seleccionar elementos -- ###
df[1,2]
### ------ Cambiar nombres columnas ----- ###
colnames(df)=c("x1","x2","y")
### ------ Cambiar nombres filas ----- ###
rownames(df)=c("mayo","junio","julio")
df
### ------ Llamar elementos ---- ####
df[["x1"]]
df$y
#### ---- listas ----- #
lista=list(nombre="pepito",datos=df,matriz=matriz,edad=24)
#### ------- llamar elementos --- ###
lista$nombre
lista$datos[,1]
lista[[2]]
#### --------- Iteraciones - loop -------- #####
for(i in 1:5){
print(i)
}
#### ---- Ciclos ---- ####
i=1
while(i<5){
print(i)
i=i+1
}
i
i=3
if(i==4){
print("hola")
}
i=5
if(i==4){
print("hola")
}else{
print("no paso")
}
i=10
if(i==4){
print("4")
}else if(i<3){
print("menor a tres")
}else{
print("ninguno")
}
######## ---------- Repaso estadistica ------ ######
### ----- Gr치ficar distribuciones sacar percentiles, media, varianza, Asimetria y kurtosis.
#### --------- Normal --------- #######
####### ---  Miles/(US) gallon ----- ########
ggplot(data = mtcars, aes(x = mpg)) +
geom_histogram(aes(y = ..density.., fill = ..count..)) +
scale_fill_gradient(low = "#DCDCDC", high = "#7C7C7C") +
stat_function(fun = dnorm, colour = "blue",
args = list(mean = mean(mtcars$mpg),
sd = sd(mtcars$mpg))) +
ggtitle("Histograma + curva normal te칩rica") +
theme_bw()
#### ------- Simulacion de datos normal --------- #######
Distribucion_normal = rnorm(mean = 20,n = 1000,sd = 6)
#### ------- Simulacion de datos de una uniforme ------- ########
Distribucion_uniforme = runif(min = 10.4,max = 33.9,n = 1000)
#### ---------- Tipo de Gr치fico: Distribucion --------- ########
## frecuencia de los valores representados por medio de barras
## ------ Histograma Distribucion normal ----- #####
hist(Distribucion_normal)
## ------ Histograma Distribucion uniforme ----- #####
hist(Distribucion_uniforme)
### --------- Carros -------- #####
qqnorm(mtcars$mpg, pch = 19, col = "gray50")
qqline(mtcars$mpg)
### --------- Simulada normal -------- ######
qqnorm(Distribucion_normal, pch = 19, col = "gray50")
qqline(Distribucion_normal)
### --------- Simulada uniforme -------- ######
qqnorm(Distribucion_uniforme, pch = 19, col = "gray50")
qqline(Distribucion_uniforme)
#####------ Media ----- #######
### --------- Carros -------- #####
mean(mtcars$mpg)
### --------- Distribucion_normal -------- #####
mean(Distribucion_normal)
### --------- Simulada uniforme -------- ######
mean(Distribucion_uniforme)
#####------ Varianza ----- #######
######## --------- Construir una funcion ------- ######
varianza <- function (x){
Numerador = sum((x-mean(x))^2)
Denominador = (length(x)-1)
Resultado= Numerador/Denominador
return(Resultado)
}
#####------ Varianza ----- #######
### --------- Carros -------- #####
varianza(mtcars$mpg)
### --------- Distribucion_normal -------- #####
varianza(Distribucion_normal)
### --------- Simulada uniforme -------- ######
varianza(Distribucion_uniforme)
### --------- Comprobacion con funcion de R -------- #####
### --------- Carros -------- #####
sd(mtcars$mpg)^2
### --------- Distribucion_normal -------- #####
sd(Distribucion_normal)^2
### --------- Simulada uniforme -------- ######
sd(Distribucion_uniforme)^2
### --------- Desviacion -------- #####
### --------- Carros -------- #####
sd(mtcars$mpg)
### --------- Distribucion_normal -------- #####
sd(Distribucion_normal)
### --------- Simulada uniforme -------- ######
sd(Distribucion_uniforme)
#### ------ Percentiles ------- ######
### --------- Carros -------- #####
quantile(mtcars$mpg)
### --------- Distribucion_normal -------- #####
quantile(Distribucion_normal)
### --------- Simulada uniforme -------- ######
quantile(Distribucion_uniforme)
########## --------- Estadisticas en un solo comando --------- ##########
### --------- Carros -------- #####
summary(mtcars$mpg)
### --------- Distribucion_normal -------- #####
summary(Distribucion_normal)
### --------- Simulada uniforme -------- ######
summary(Distribucion_uniforme)
links = c("https://totoro.banrep.gov.co/analytics/saw.dll?Download&Format=excel2007&Extension=.xlsx&BypassCache=true&path=%2Fshared%2fSeries%20Estad%c3%adsticas_T%2F1.%20IBR%2F%201.1.IBR_Plazo%20overnight%20nominal%20para%20un%20rango%20de%20fechas%20dado%20IQY&lang=es&NQUser=publico&NQPassword=publico123&SyncOperation=1")
print(paste("Procesando ON"))
#se extraen los datos de la descarga
r = GET(links,
add_headers(
Host="totoro.banrep.gov.co",
`User-Agent`="Mozilla/5.0 (Windows NT 6.3; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0",
Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
`Accept-Language` = "es-ES,es;q=0.8,en-US;q=0.5,en;q=0.3",
`Accept-Encoding` = "gzip, deflate",
Connection = "keep-alive"
))
#se pasan a formato excel
bin = content(r, "raw")
archivo = "archivo.xlsx"
writeBin(bin, archivo)
#se leen
d = try(read.xlsx(archivo, sheet = 1, detectDates = T),silent=T)
############# ---------- Clase 1: Calculo de VAR hist칩rico ------------ #######
####### ----------- Limpiar ambiente ------- ######
rm(list = ls())
##### --------- Path: automatico  --------- #####
path <<- gsub(rstudioapi::getActiveDocumentContext()$path,pattern = "/Ejercicio 3.+",replacement = "")
setwd(paste0(path,'/Ejercicio 3/'))
##### -------- librerias ------- ######
librerias <- c("readxl","ggplot2","scales",'timeSeries')
###### ----- Instalacion liberarias ------ ####3
if(length(setdiff(librerias, rownames(installed.packages()))) > 0){
install.packages(setdiff(librerias, rownames(installed.packages())))}
invisible(sapply(librerias, require, character.only = TRUE,quietly = TRUE))
###### ----------- Precios acciones ---------- #####
Historia_precios = as.data.frame(read_excel('Historia.xlsx'))
## ----- Organice los datos
Historia_precios = Historia_precios[-c(1,3),-c(1,2)]
## -- Ponga el nombre de las columnas -- ##
colnames(Historia_precios) = Historia_precios[1,]
#### ------ Elimine la primera fila de nombres ------ ###
Historia_precios = Historia_precios[-1,]
#### ----- Todo numerico ----- ####
Historia_precios = as.data.frame(apply(Historia_precios, 2, as.numeric))
#### ----- Arregle el formato de fechas ---- ######
Historia_precios$Fecha = as.Date(Historia_precios$Fecha,origin = "1899-12-30")
#### ----- Modificar el nombre de las filas con las fechas ------ ####
rownames(Historia_precios) =  Historia_precios$Fecha
#### ------- Eliminar fila de fecha ------ ####
Historia_precios = Historia_precios[,-c(1)]
Historia_precios = as.matrix(Historia_precios)
#### ---- Vector de las empresas ---- ####
Vector_de_empresas = colnames(Historia_precios)
####### -------------- Portafolio de inversion: -------------- #######
Portafolio_acciones = as.data.frame(read_excel('Portafolio.xlsx'))
##### ---- Se crea una columna del valor de la accion ---- #####
Portafolio_acciones$Valor = 0
#### ----- Se pone el nombre de las acciones a las filas ----- ####
rownames(Portafolio_acciones) = Portafolio_acciones$Empresa
#### ----- Se elimina el vector de acciones ---- ###
Portafolio_acciones = Portafolio_acciones[,-1]
###### ----------- Paso 2: Valor del portafolio ---------- #######
### ------ Ultimo precio ------ ###
Ultimo_precio = Historia_precios[dim(Historia_precios)[1],]
###### --------- Valor portafolio: Unidades por ultimo dato ------ #####
Portafolio_acciones$Valor = Portafolio_acciones[Vector_de_empresas,"Acciones"]*Ultimo_precio
Valor_total_portafolio = sum(Portafolio_acciones$Valor)
print(paste0('El valor total del portafolio es de $', format(Valor_total_portafolio,big.mark=",",scientific=FALSE) , ' pesos'))
###### ---------- Paso 3: Calculo de Retornos historicos ------- ######
#### ----- Plazo de los retornos a un dia #######
Retornos_historicos = apply(Historia_precios, 2, function(x){returns(x,method = 'simple')})
##### ------ sE elimina el primero ------- #####
Retornos_historicos = Retornos_historicos[-1,]
######### ------------- Calculo de VAR ----------- #########3
## calcular el VaR a partir de una distribucion
## 1. Retornos_historicos: Matriz de los retornos
## 2. Confianza: Confianza de confianza para el cual se quiere el VaR. Por ejemplo 5%
### Output: vector con el VaR: en Retorno ----- ####33
Confianza = 0.05
