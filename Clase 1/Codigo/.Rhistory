######## --------- Organizar de mayor a menor ----- ######
Empleo_colombia = Empleo_colombia[c(order(Empleo_colombia$Date,decreasing = FALSE)),]
rownames(Empleo_colombia) = NULL
Empleo_colombia
####### ----------- Limpiar ambiente ------- ######
rm(list = ls())
Fecha_inicial = as.Date("2010-01-1")
Fecha_final = as.Date("2018-12-31")
##### -------- librerias ------- ######
librerias <- c("dplyr","tidyr","xts",'ggplot2','scales','matrixStats','readxl','openxlsx','httr','lubridate','forecast')
set.seed(123)
###### ----- Instalacion paquetes ------ ####
if(length(setdiff(librerias, rownames(installed.packages()))) > 0){
install.packages(setdiff(librerias, rownames(installed.packages())))}
invisible(sapply(librerias, require, character.only = TRUE,quietly = TRUE))
######## ------- funcion para graficar simulaciones ------- #######
Graficar_simulaciones  = function(mat,title,hist=NULL,plotear=F,quitarCeros=0,leyenda_x,leyenda_y,Fecha_inicial = "2011-09-01"){
## INPUTS
## 1. mat: matriz con las simulaciones por columnas
## 2. hist: vector con la historia de la variable simulada
## 3. quitarCeros: numero de ceros a quitar
## 4. plot: Si se desea plotear o no
mat=t(mat)
medias = colMeans(mat)
data = data.frame(media = medias)
upper_seq = seq(70,95,by = 5)/100
int=t(apply(mat,2,quantile,probs=upper_seq))
data=cbind(data,t(apply(mat,2,quantile,probs=c(1-upper_seq,upper_seq))))
colnames(data) = c("media","min70","min75","min80","min85","min90","min95","max70","max75","max80","max85","max90","max95")
if(!is.null(hist)){
hist=matrix(rep(hist,ncol(data)),ncol = ncol(data))
colnames(hist)=colnames(data)
data=rbind(hist,data)
data=data/10^quitarCeros
}
data = cbind(seq(as.Date(Fecha_inicial),length.out = length(rownames(data)),by="month"),data)
colnames(data) = c("Fecha",colnames(data)[-1])
plot1 = ggplot(data=data)+
geom_ribbon(aes(x=Fecha,ymin=min95,ymax=max95),alpha=0.3,fill="#4d4f44") +
geom_ribbon(aes(x=Fecha,ymin=min90,ymax=max90),alpha=0.4,fill="#0e4d2c") +
geom_ribbon(aes(x=Fecha,ymin=min85,ymax=max85),alpha=0.5,fill="#00665e") +
geom_ribbon(aes(x=Fecha,ymin=min80,ymax=max80),alpha=0.6,fill="#223063") +
geom_ribbon(aes(x=Fecha,ymin=min75,ymax=max75),alpha=0.7,fill="#98ad3a") +
geom_line(aes(x=Fecha,y=min95),col="#0e4d2c",size=1.5,alpha =0.5) +
geom_line(aes(x=Fecha,y=max95),col="#0e4d2c",size=1.5,alpha =0.5) +
geom_line(aes(x=Fecha,y=media),col="#b9bd2e",size=1.5) +
theme(legend.position="none") + labs(title = title)+
theme_bw()+ theme(legend.background = element_rect(fill="white", size=2.5, linetype="solid"),legend.title = element_text(colour="black", size=12, face="bold"),axis.text.x=element_text(angle=0, hjust=1),legend.text = element_text(colour="black", size=15, face="bold"),panel.grid.major = element_blank(), panel.border = element_blank(), plot.title = element_text(hjust = 1),axis.text=element_text(size=25,face="bold"),axis.title=element_text(size=25,face="bold"),legend.position = "top")+labs(title=title)+labs(x = leyenda_x, y = leyenda_y) +scale_x_date(date_breaks = "14 month", date_labels =  "%b %y")+scale_y_continuous(labels = comma)
if(plotear){print(plot1)}
return(plot1)
}
####### ----------- Cargar datos ----- #######
##### --------- Empleo ------ ########
Empleo_colombia = as.data.frame(read_excel('Empleo_COL.xlsx'))
###### ------ eliminamos todas las filas que tengan cero en todo ----- #######
Empleo_colombia = Empleo_colombia[apply(Empleo_colombia,1,function(x){!all(is.na(x))} ),]
###### ------ eliminamos todas las filas que tengan cero en todo ----- #######
Empleo_colombia = Empleo_colombia[!is.na(Empleo_colombia[,2]),]
###### ------ Tomamos todo lo númerico----- #######
Empleo_colombia = Empleo_colombia[c(grep(pattern = "[0-9]",x = Empleo_colombia[,2])),] ### --- Sólo tomamos los datos reportados --- ###
Empleo_colombia = Empleo_colombia[,c(1,2)]
### --- Organizamos los datos --- ###
colnames(Empleo_colombia) = c("Date","Tasa_de_Empleo")
rownames(Empleo_colombia) = NULL
##### ----- Arreglamos la fecha --- ####3
Empleo_colombia$Date =  as.Date(paste0(Empleo_colombia$Date,"-1"))
##### -------- Numerica ---- ####3
Empleo_colombia$Tasa_de_Empleo = as.numeric(Empleo_colombia$Tasa_de_Empleo)
######## --------- Organizar de mayor a menor ----- ######
Empleo_colombia = Empleo_colombia[c(order(Empleo_colombia$Date,decreasing = FALSE)),]
rownames(Empleo_colombia) = NULL
View(Empleo_colombia)
ts
Empleo_colombia[,2]
c(year(Empleo_colombia$Date[1]),month(Empleo_colombia$Date[1]))
Empleo_colombia$Date[1]
year(Empleo_colombia$Date[12]))
Empleo_colombia$Date[1]
year(Empleo_colombia$Date[1])
year(Empleo_colombia$Date[2])
year(Empleo_colombia$Date[24])
month(Empleo_colombia$Date[1])
Empleo_colombia[,2]
(year(Empleo_colombia$Date[1]),month(Empleo_colombia$Date[1]))
c(year(Empleo_colombia$Date[1]),month(Empleo_colombia$Date[1]))
c(year(Fecha_final),month(Fecha_final))
### --- TS --- ###
empleo_serie_tiempo = ts(Empleo_colombia[,2],start = c(year(Empleo_colombia$Date[1]),month(Empleo_colombia$Date[1])),end = c(year(Fecha_final),month(Fecha_final)),frequency = 12)
empleo_serie_tiempo
plot(empleo_serie_tiempo)
class(empleo_serie_tiempo)
Empleo_colombia[,2]
Empleo_colombia[,2]
Empleo_colombia[,2]
as.Date(Empleo_colombia$Date)
xts(Empleo_colombia[,2],order.by = as.Date(Empleo_colombia$Date))
## --- Se eliminan los datos anteriores a la Fecha_inicial --- ###
Empleo_colombia_t = xts(Empleo_colombia[,2],order.by = as.Date(Empleo_colombia$Date))
Empleo_colombia_t
time(Empleo_colombia_t)
View(Empleo_colombia_t)
time(Empleo_colombia_t)
time(Empleo_colombia_t)<=Fecha_final
time(Empleo_colombia_t)>=Fecha_inicial
Empleo_colombia_t = Empleo_colombia_t[time(Empleo_colombia_t)<=Fecha_final]
Empleo_colombia_t = Empleo_colombia_t[time(Empleo_colombia_t)>=Fecha_inicial]
Empleo_colombia_t
Empleo_colombia_t
Empleo_colombia_t
### --- Trimestralización de los datos --- ###
Empleo_colombia_ts = apply.quarterly(Empleo_colombia_t,function(x) mean(x))
Empleo_colombia_ts
### --- Trimestralización de los datos --- ###
Empleo_colombia_ts = apply.quarterly(Empleo_colombia_t,function(x) mean(x))
Empleo_colombia_ts
ts(as.numeric(Empleo_colombia_ts),start = c(2010,1), frequency = 4)
Empleo_ts = ts(as.numeric(Empleo_colombia_ts),start = c(2010,1), frequency = 4)
##### --------- Cambio de la serie de tiempo de Empleo ------ ########
plot(Empleo_ts)
Empleo_ts
##### --------- Cambio de la serie de tiempo de Empleo ------ ########
plot(Empleo_ts)
##### --------- Cambio de la TASA ICC ------ ########
ICC = read.csv('ICC.csv')
ICC
##### --------- Cambio del IPP ------ ########
IPP = read.csv('IPP.csv')
########### ------ Transformar en una serie de tiempo -------- #########
Periodo_inicial = c(year(Fecha_inicial),quarter(Fecha_inicial))
Periodo_Final = c(year(Fecha_final),quarter(Fecha_final))
##### --------- ICC ------ #######
ICC_ts = ts(as.numeric(ICC$ICC),start= Periodo_inicial, end = Periodo_Final, frequency = 4)
plot(ICC_ts)
##### --------- IPP ------ ########
IPP_ts = ts(as.numeric(IPP$IPP),start= Periodo_inicial, end = Periodo_Final, frequency = 4)
plot(IPP_ts)
IPP_ts
ICC_ts
############ ----------------- Reporte Grupo exito ------- ###########
Exito = as.data.frame(read.csv('/Volumes/GoogleDrive/My Drive/Uniandes Series de tiempo/Clase 1/Codigo/Datos_exito.csv'))
############ ----------------- Reporte Grupo exito ------- ###########
Exito = as.data.frame(read.csv('Datos_exito.csv'))
Exito
e
############ ----------------- Reporte Grupo exito ------- ###########
Exito = as.data.frame(read.csv('Datos_exito.csv'))
Exito
Fecha_inicial
Fecha_inicial
Ingresos_exito_log_ts = ts(log(as.numeric(as.numeric(Exito[,"iexito"]))),start = c(year(Fecha_inicial),quarter(Fecha_inicial)) ,end = c(year(Fecha_final),quarter(Fecha_final)), frequency = 4)
Ingresos_exito_log_ts
Exito$iexito
plot(Exito$iexito)
plot(Exito$iexito,type= 'lines')
##### --------- Regresión 1: Logaritmo de los ingresos de Éxito Trimestrales --------- #####
Reg_ingresos_exito_ts = tslm(Ingresos_exito_log_ts~Empleo_ts+ICC_ts+IPP_ts)
####### ----------- Limpiar ambiente ------- ######
rm(list = ls())
Fecha_inicial = as.Date("2010-01-1")
Fecha_final = as.Date("2018-12-31")
##### -------- librerias ------- ######
librerias <- c("dplyr","tidyr","xts",'ggplot2','scales','matrixStats','readxl','openxlsx','httr','lubridate','forecast')
set.seed(123)
###### ----- Instalacion paquetes ------ ####
if(length(setdiff(librerias, rownames(installed.packages()))) > 0){
install.packages(setdiff(librerias, rownames(installed.packages())))}
invisible(sapply(librerias, require, character.only = TRUE,quietly = TRUE))
######## ------- funcion para graficar simulaciones ------- #######
Graficar_simulaciones  = function(mat,title,hist=NULL,plotear=F,quitarCeros=0,leyenda_x,leyenda_y,Fecha_inicial = "2011-09-01"){
## INPUTS
## 1. mat: matriz con las simulaciones por columnas
## 2. hist: vector con la historia de la variable simulada
## 3. quitarCeros: numero de ceros a quitar
## 4. plot: Si se desea plotear o no
mat=t(mat)
medias = colMeans(mat)
data = data.frame(media = medias)
upper_seq = seq(70,95,by = 5)/100
int=t(apply(mat,2,quantile,probs=upper_seq))
data=cbind(data,t(apply(mat,2,quantile,probs=c(1-upper_seq,upper_seq))))
colnames(data) = c("media","min70","min75","min80","min85","min90","min95","max70","max75","max80","max85","max90","max95")
if(!is.null(hist)){
hist=matrix(rep(hist,ncol(data)),ncol = ncol(data))
colnames(hist)=colnames(data)
data=rbind(hist,data)
data=data/10^quitarCeros
}
data = cbind(seq(as.Date(Fecha_inicial),length.out = length(rownames(data)),by="month"),data)
colnames(data) = c("Fecha",colnames(data)[-1])
plot1 = ggplot(data=data)+
geom_ribbon(aes(x=Fecha,ymin=min95,ymax=max95),alpha=0.3,fill="#4d4f44") +
geom_ribbon(aes(x=Fecha,ymin=min90,ymax=max90),alpha=0.4,fill="#0e4d2c") +
geom_ribbon(aes(x=Fecha,ymin=min85,ymax=max85),alpha=0.5,fill="#00665e") +
geom_ribbon(aes(x=Fecha,ymin=min80,ymax=max80),alpha=0.6,fill="#223063") +
geom_ribbon(aes(x=Fecha,ymin=min75,ymax=max75),alpha=0.7,fill="#98ad3a") +
geom_line(aes(x=Fecha,y=min95),col="#0e4d2c",size=1.5,alpha =0.5) +
geom_line(aes(x=Fecha,y=max95),col="#0e4d2c",size=1.5,alpha =0.5) +
geom_line(aes(x=Fecha,y=media),col="#b9bd2e",size=1.5) +
theme(legend.position="none") + labs(title = title)+
theme_bw()+ theme(legend.background = element_rect(fill="white", size=2.5, linetype="solid"),legend.title = element_text(colour="black", size=12, face="bold"),axis.text.x=element_text(angle=0, hjust=1),legend.text = element_text(colour="black", size=15, face="bold"),panel.grid.major = element_blank(), panel.border = element_blank(), plot.title = element_text(hjust = 1),axis.text=element_text(size=25,face="bold"),axis.title=element_text(size=25,face="bold"),legend.position = "top")+labs(title=title)+labs(x = leyenda_x, y = leyenda_y) +scale_x_date(date_breaks = "14 month", date_labels =  "%b %y")+scale_y_continuous(labels = comma)
if(plotear){print(plot1)}
return(plot1)
}
####### ----------- Cargar datos ----- #######
##### --------- Empleo ------ ########
Empleo_colombia = as.data.frame(read_excel('Empleo_COL.xlsx'))
###### ------ eliminamos todas las filas que tengan cero en todo ----- #######
Empleo_colombia = Empleo_colombia[apply(Empleo_colombia,1,function(x){!all(is.na(x))} ),]
###### ------ eliminamos todas las filas que tengan cero en todo ----- #######
Empleo_colombia = Empleo_colombia[!is.na(Empleo_colombia[,2]),]
###### ------ Tomamos todo lo númerico----- #######
Empleo_colombia = Empleo_colombia[c(grep(pattern = "[0-9]",x = Empleo_colombia[,2])),] ### --- Sólo tomamos los datos reportados --- ###
Empleo_colombia = Empleo_colombia[,c(1,2)]
### --- Organizamos los datos --- ###
colnames(Empleo_colombia) = c("Date","Tasa_de_Empleo")
rownames(Empleo_colombia) = NULL
##### ----- Arreglamos la fecha --- ####3
Empleo_colombia$Date =  as.Date(paste0(Empleo_colombia$Date,"-1"))
##### -------- Numerica ---- ####3
Empleo_colombia$Tasa_de_Empleo = as.numeric(Empleo_colombia$Tasa_de_Empleo)
######## --------- Organizar de mayor a menor ----- ######
Empleo_colombia = Empleo_colombia[c(order(Empleo_colombia$Date,decreasing = FALSE)),]
rownames(Empleo_colombia) = NULL
### --- TS --- ###
empleo_serie_tiempo = ts(Empleo_colombia[,2],start = c(year(Empleo_colombia$Date[1]),month(Empleo_colombia$Date[1])),end = c(year(Fecha_final),month(Fecha_final)),frequency = 12)
## --- Se eliminan los datos anteriores a la Fecha_inicial --- ###
Empleo_colombia_t = xts(Empleo_colombia[,2],order.by = as.Date(Empleo_colombia$Date))
### --- Condicionalmos a la Fecha final --- ###
Empleo_colombia_t = Empleo_colombia_t[time(Empleo_colombia_t)<=Fecha_final]
Empleo_colombia_t = Empleo_colombia_t[time(Empleo_colombia_t)>=Fecha_inicial]
### --- Trimestralización de los datos --- ###
Empleo_colombia_ts = apply.quarterly(Empleo_colombia_t,function(x) mean(x))
Empleo_ts = ts(as.numeric(Empleo_colombia_ts),start = c(2010,1), frequency = 4)
##### --------- Cambio de la serie de tiempo de Empleo ------ ########
plot(Empleo_ts)
##### --------- Cambio de la TASA ICC ------ ########
ICC = read.csv('ICC.csv')
##### --------- Cambio del IPP ------ ########
IPP = read.csv('IPP.csv')
########### ------ Transformar en una serie de tiempo -------- #########
Periodo_inicial = c(year(Fecha_inicial),quarter(Fecha_inicial))
Periodo_Final = c(year(Fecha_final),quarter(Fecha_final))
##### --------- ICC ------ #######
ICC_ts = ts(as.numeric(ICC$ICC),start= Periodo_inicial, end = Periodo_Final, frequency = 4)
plot(ICC_ts)
##### --------- IPP ------ ########
IPP_ts = ts(as.numeric(IPP$IPP),start= Periodo_inicial, end = Periodo_Final, frequency = 4)
plot(IPP_ts)
############ ----------------- Reporte Grupo exito ------- ###########
Exito = as.data.frame(read.csv('Datos_exito.csv'))
Ingresos_exito_log_ts = ts(log(as.numeric(as.numeric(Exito[,"iexito"]))),start = c(year(Fecha_inicial),quarter(Fecha_inicial)) ,end = c(year(Fecha_final),quarter(Fecha_final)), frequency = 4)
##### --------- Regresión 1: Logaritmo de los ingresos de Éxito Trimestrales --------- #####
Reg_ingresos_exito_ts = tslm(Ingresos_exito_log_ts~Empleo_ts+ICC_ts+IPP_ts)
?tslm
Ingresos_exito_log_ts
Ingresos_exito_log_ts
Empleo_ts
Ingresos_exito_log_ts
Ingresos_exito_log_ts
Empleo_ts
ICC_ts
IPP_ts
##### --------- Regresión 1: Logaritmo de los ingresos de Éxito Trimestrales --------- #####
Reg_ingresos_exito_ts = tslm(Ingresos_exito_log_ts~Empleo_ts+ICC_ts+IPP_ts)
Reg_ingresos_exito_ts
Reg_ingresos_exito_ts
###### ---- Estadisticas descriptivas ----- ####
summary(Reg_ingresos_exito_ts)
####### -------- Nueva regresion ------- ######
Reg_ingresos_exito_ts = tslm(Ingresos_exito_log_ts~Empleo_ts)
Reg_ingresos_exito_ts
summary(Reg_ingresos_exito_ts)
########### ---------------- Proyeccion ------------- ###########
###### ------ Cargar simulaciones ---- ####
Empleo_colombia_simulado = readRDS('Simulaciones_empleo.Rds')
Empleo_colombia_simulado
dim(Empleo_colombia_simulado)
Empleo_colombia_simulado[,1]
Empleo_colombia_simulado[,1]
plot(Empleo_colombia_simulado[,1])
plot(Empleo_colombia_simulado[,2])
Empleo_colombia_simulado
Empleo_colombia_simulado[1,]
hist(Empleo_colombia_simulado[1,])
hist(Empleo_colombia_simulado[10,])
########### ---------------- Proyeccion ------------- ###########
###### ------ Cargar simulaciones ---- ####
Empleo_colombia_simulado = readRDS('Simulaciones_empleo.Rds')
numeroSim = 1000
Reg_ingresos_exito_ts
data.frame(Empleo_ts=Empleo_colombia_simulado[,1])
forecast(Reg_ingresos_exito_ts,h = 62,newdata = data.frame(Empleo_ts=Empleo_colombia_simulado[,1]))
plot(forecast(Reg_ingresos_exito_ts,h = 62,newdata = data.frame(Empleo_ts=Empleo_colombia_simulado[,1])))
numeroSim
Proy_log_ingresos_exito_ts = sapply(1:numeroSim,function(x) forecast(Reg_ingresos_exito_ts,h = 62,newdata = data.frame(Empleo_ts=Empleo_colombia_simulado[,x]))$mean)
Proy_log_ingresos_exito_ts = sapply(1:numeroSim,function(x) forecast(Reg_ingresos_exito_ts,h = 62,newdata = data.frame(Empleo_ts=Empleo_colombia_simulado[,x]))$mean)
Proy_log_ingresos_exito_ts
dim(Proy_log_ingresos_exito_ts)
### --- Destraformación del logaritmo --- ###
Proy_ingresos_exito = exp(Proy_log_ingresos_exito_ts)
########## ------- Resultados ------ #########3
grafico3 = Graficar_simulaciones(hist=Exito[,"iexito"],(Proy_ingresos_exito), title = "Proyección de los ingresos",leyenda_x = "",leyenda_y = "")
grafico3
Reg_ingresos_exito_ts
Reg_ingresos_exito_ts$coefficients
Reg_ingresos_exito_ts$residuals
plot(Reg_ingresos_exito_ts$residuals)
####### -------- Nueva regresion ------- ######
Reg_ingresos_exito_ts = tslm(Ingresos_exito_log_ts~Empleo_ts+trend)
summary(Reg_ingresos_exito_ts)
plot(Reg_ingresos_exito_ts$residuals)
####### ----------- Limpiar ambiente ------- ######
rm(list = ls())
##### -------- librerias ------- ######
librerias <- c("readxl","ggplot2","scales",'timeSeries','timeSeries','forecast','rugarch','fBasics','moments')
###### ----- Instalacion paquetes ------ ####
if(length(setdiff(librerias, rownames(installed.packages()))) > 0){
install.packages(setdiff(librerias, rownames(installed.packages())))}
invisible(sapply(librerias, require, character.only = TRUE,quietly = TRUE))
###### ---------- Parte 1: Manejo de datos -------- ######
1+2
2-2
a=2
a+a
a
b=4
a+b
b=1
#### ------- Vector numericos ------ #####
vector_numerico=c(2,4,6,8)
print(vector_numerico)
#### ------- Vector textos ------ #####
vector_texto=c("uno","dos","tres")
print(vector_texto)
#### ------- Vector logicos ------ #####
vector_logicos=c(TRUE,FALSE,TRUE)
print(vector_logicos)
#### ------- Elementos del vector  ------ #####
vector_numerico[1]
vector_numerico[4]
vector_numerico[1:3]
vector_numerico[-2]
vector_numerico[c(1,3)]
vector_numerico[-c(1,3)]
#### ------- Matrices  ------ #####
matriz=matrix(data=c(2,3,5,0,0,1,1,0,1),nrow = 3,ncol=3)
det(matriz)
diag(matriz)
matriz2=matrix(data=c(1,1,1,0,2,1,1,1,0),nrow = 3,ncol=3)
#### ------- Multiplicacion matricial  ------ #####
matriz%*%matriz2
matriz[1,2]
matriz[1:2,3]
matriz[1,]
matriz[c(1,3),c(2,3)]
#### ------- DataFrames  ------ #####
a=c(1,2,3)
b=c(2,3,4)
c=c(3,4,5)
df=data.frame(a,b,c)
print(df)
###--- Seleccionar elementos -- ###
df[1,2]
### ------ Cambiar nombres columnas ----- ###
colnames(df)=c("x1","x2","y")
### ------ Cambiar nombres filas ----- ###
rownames(df)=c("mayo","junio","julio")
df
### ------ Llamar elementos ---- ####
df[["x1"]]
df$y
#### ---- listas ----- #
lista=list(nombre="pepito",datos=df,matriz=matriz,edad=24)
#### ------- llamar elementos --- ###
lista$nombre
lista$datos[,1]
lista[[2]]
#### --------- Iteraciones - loop -------- #####
for(i in 1:5){
print(i)
}
#### ---- Ciclos ---- ####
i=1
while(i<5){
print(i)
i=i+1
}
i
#### ---- Condicionales ---- ####
i=3
if(i==4){
print("hola")
}
i=5
if(i==4){
print("hola")
}else{
print("no paso")
}
i=10
if(i==4){
print("4")
}else if(i<3){
print("menor a tres")
}else{
print("ninguno")
}
######## ---------- Repaso estadistica ------ ######
### ----- Gráficar distribuciones sacar percentiles, media, varianza, Asimetria y kurtosis.
#### --------- Normal --------- #######
####### ---  Miles/(US) gallon ----- ########
ggplot(data = mtcars, aes(x = mpg)) +
geom_histogram(aes(y = ..density.., fill = ..count..)) +
scale_fill_gradient(low = "#DCDCDC", high = "#7C7C7C") +
stat_function(fun = dnorm, colour = "blue",
args = list(mean = mean(mtcars$mpg),
sd = sd(mtcars$mpg))) +
ggtitle("Histograma + curva normal teórica") +
theme_bw()
#### ------- Simulacion de datos normal --------- #######
Distribucion_normal = rnorm(mean = 20,n = 1000,sd = 6)
#### ------- Simulacion de datos de una uniforme ------- ########
Distribucion_uniforme = runif(min = 10.4,max = 33.9,n = 1000)
#### ---------- Tipo de Gráfico: Distribucion --------- ########
## frecuencia de los valores representados por medio de barras
## ------ Histograma Distribucion normal ----- #####
hist(Distribucion_normal)
## ------ Histograma Distribucion uniforme ----- #####
hist(Distribucion_uniforme)
######## ------ Tipo de Gráfico: percentiles plot ----------- ######
# Grafico comparartivo de la distribución observada con los
# percentiles teóricos de una distribución normal con la misma media y desviación estándar que los datos.
# Cuanto más se aproximen los datos a una normal, más alineados están los puntos entorno a la recta.
### --------- Carros -------- #####
qqnorm(mtcars$mpg, pch = 19, col = "gray50")
qqline(mtcars$mpg)
### --------- Simulada normal -------- ######
qqnorm(Distribucion_normal, pch = 19, col = "gray50")
qqline(Distribucion_normal)
### --------- Simulada uniforme -------- ######
qqnorm(Distribucion_uniforme, pch = 19, col = "gray50")
qqline(Distribucion_uniforme)
#####------ Media ----- #######
### --------- Carros -------- #####
mean(mtcars$mpg)
### --------- Distribucion_normal -------- #####
mean(Distribucion_normal)
### --------- Simulada uniforme -------- ######
mean(Distribucion_uniforme)
#####------ Varianza ----- #######
######## --------- Construir una funcion ------- ######
varianza <- function (x){
Numerador = sum((x-mean(x))^2)
Denominador = (length(x)-1)
Resultado= Numerador/Denominador
return(Resultado)
}
#####------ Varianza ----- #######
### --------- Carros -------- #####
varianza(mtcars$mpg)
### --------- Distribucion_normal -------- #####
varianza(Distribucion_normal)
### --------- Simulada uniforme -------- ######
varianza(Distribucion_uniforme)
### --------- Comprobacion con funcion de R -------- #####
### --------- Carros -------- #####
sd(mtcars$mpg)^2
### --------- Distribucion_normal -------- #####
sd(Distribucion_normal)^2
### --------- Simulada uniforme -------- ######
sd(Distribucion_uniforme)^2
### --------- Desviacion -------- #####
### --------- Carros -------- #####
sd(mtcars$mpg)
### --------- Distribucion_normal -------- #####
sd(Distribucion_normal)
### --------- Simulada uniforme -------- ######
sd(Distribucion_uniforme)
#### ------ Percentiles ------- ######
### --------- Carros -------- #####
quantile(mtcars$mpg)
### --------- Distribucion_normal -------- #####
quantile(Distribucion_normal)
### --------- Simulada uniforme -------- ######
quantile(Distribucion_uniforme)
########## --------- Estadisticas en un solo comando --------- ##########
### --------- Carros -------- #####
summary(mtcars$mpg)
### --------- Distribucion_normal -------- #####
summary(Distribucion_normal)
### --------- Simulada uniforme -------- ######
summary(Distribucion_uniforme)
####### ------------------- Asimetria -------------- #########
# Permite identificar y describir la manera como los datos tiende
# a reunirse de acuerdo con la frecuencia con que se hallen dentro de la distribución.
# Permite identificar las características de la distribución de datos sin necesidad de generar el gráfico.
# Valores cercanos a cero implica que la distribución es simétrica.
### --------- Carros -------- #####
skewness(mtcars$mpg)
### --------- Distribucion_normal -------- #####
skewness(Distribucion_normal)
### --------- Simulada uniforme -------- ######
skewness(Distribucion_uniforme)
####### ------------------- Curtosis - Apuntamiento -------------- #########
# Mayor curtosis implica una mayor concentración de valores de la variable
# muy cerca de la media de la distribución (pico) y muy lejos de la misma (colas),
### --------- Carros -------- #####
kurtosis(mtcars$mpg)
### --------- Distribucion_normal -------- #####
kurtosis(Distribucion_normal)
### --------- Simulada uniforme -------- ######
kurtosis(Distribucion_uniforme)
