## -- Ponga el nombre de las columnas -- ##
colnames(Historia_precios) = Historia_precios[1,]
#### ------ Elimine la primera fila de nombres ------ ###
Historia_precios = Historia_precios[-1,]
#### ----- Todo numerico ----- ####
Historia_precios = as.data.frame(apply(Historia_precios, 2, as.numeric))
Historia_precios$Fecha
###### ----------- Precios acciones ---------- #####
Historia_precios = as.data.frame(read_excel('Historia.xlsx'))
## ----- Organice los datos
Historia_precios = Historia_precios[-c(1,3),-c(1,2)]
## -- Ponga el nombre de las columnas -- ##
colnames(Historia_precios) = Historia_precios[1,]
#### ------ Elimine la primera fila de nombres ------ ###
Historia_precios = Historia_precios[-1,]
#### ----- Todo numerico ----- ####
Historia_precios = as.data.frame(apply(Historia_precios, 2, as.numeric))
Historia_precios
###### ----------- Precios acciones ---------- #####
Historia_precios = as.data.frame(read_excel('Historia.xlsx'))
Historia_precios
############# ---------- Calculo de VAR histórico ------------ #######
####### ----------- Limpiar ambiente ------- ######
rm(list = ls())
##### -------- librerias ------- ######
librerias <- c("readxl","ggplot2","scales",'timeSeries')
###### ----- Instalacion liberarias ------ ####3
if(length(setdiff(librerias, rownames(installed.packages()))) > 0){
install.packages(setdiff(librerias, rownames(installed.packages())))}
invisible(sapply(librerias, require, character.only = TRUE,quietly = TRUE))
###### ----------- Precios acciones ---------- #####
Historia_precios = as.data.frame(read_excel('Historia.xlsx'))
## ----- Organice los datos
Historia_precios = Historia_precios[-c(1,3),-c(1,2)]
Historia_precios
## -- Ponga el nombre de las columnas -- ##
colnames(Historia_precios) = Historia_precios[1,]
Historia_precios
#### ------ Elimine la primera fila de nombres ------ ###
Historia_precios = Historia_precios[-1,]
#### ----- Todo numerico ----- ####
Historia_precios = as.data.frame(apply(Historia_precios, 2, as.numeric))
Historia_precios
#### ----- Arregle el formato de fechas ---- ######
Historia_precios$Fecha = as.Date(Historia_precios$Fecha,origin = "1899-12-30")
#### ----- Modificar el nombre de las filas con las fechas ------ ####
rownames(Historia_precios) =  Historia_precios$Fecha
#### ------- Eliminar fila de fecha ------ ####
Historia_precios = Historia_precios[,-c(1)]
Historia_precios = as.matrix(Historia_precios)
#### ---- Vector de las empresas ---- ####
Vector_de_empresas = colnames(Historia_precios)
Vector_de_empresas
####### -------------- Portafolio de inversion: -------------- #######
Portafolio_acciones = as.data.frame(read_excel('Portafolio.xlsx'))
Portafolio_acciones
####### -------------- Portafolio de inversion: -------------- #######
Portafolio_acciones = as.data.frame(read_excel('Portafolio.xlsx'))
##### ---- Se crea una columna del valor de la accion ---- #####
Portafolio_acciones$Valor = 0
#### ----- Se pone el nombre de las acciones a las filas ----- ####
rownames(Portafolio_acciones) = Portafolio_acciones$Empresa
#### ----- Se elimina el vector de acciones ---- ###
Portafolio_acciones = Portafolio_acciones[,-1]
Portafolio_acciones
###### ----------- Paso 2: Valor del portafolio ---------- #######
### ------ Ultimo precio ------ ###
Ultimo_precio = Historia_precios[dim(Historia_precios)[1],]
Ultimo_precio
###### --------- Valor portafolio: Unidades por ultimo dato ------ #####
Portafolio_acciones$Valor = Portafolio_acciones[Vector_de_empresas,"Acciones"]*Ultimo_precio
Portafolio_acciones
Valor_total_portafolio = sum(Portafolio_acciones$Valor)
print(paste0('El valor total del portafolio es de $', format(Valor_total_portafolio,big.mark=",",scientific=FALSE) , ' pesos'))
###### ---------- Paso 3: Calculo de Retornos historicos ------- ######
#### ----- Plazo de los retornos a un dia #######
Retornos_historicos = apply(Historia_precios, 2, function(x){returns(x,method = 'simple')})
Retornos_historicos
##### ------ sE elimina el primero ------- #####
Retornos_historicos = Retornos_historicos[-1,]
######### ------------- Calculo de VAR ----------- #########3
## calcular el VaR a partir de una distribucion
## 1. Retornos_historicos: Matriz de los retornos
## 2. Confianza: Confianza de confianza para el cual se quiere el VaR. Por ejemplo 5%
### Output: vector con el VaR: en Retorno ----- ####33
Confianza = 0.05
####### ------- Calcula el perceil 1-alpha para cada una de las columnas de los retornos ------ ######
VaR_pct = apply(Retornos_historicos, 2,function(x){quantile(x = na.omit(as.numeric(x)),probs = (Confianza))})
VaR_pct
####### ------- Retornos a pesos------ ######
VaR_niveles <- VaR_pct*Ultimo_precio
###### --------- Grafico --------- ########
Graficar_histograma = function(Distribucion_accion,Percentil_graficar){
histograma = qplot(Distribucion_accion, geom = "histogram", fill = I("#ffa400"),
col = I("#ffa400")) + geom_vline(aes(xintercept = as.numeric(Percentil_graficar)), size = 3,linetype = "longdash", colour = "#7b98ac") +
geom_vline(aes(xintercept = as.numeric(median(Distribucion_accion))), size = 3, linetype = "solid", colour = "#00577d") +
theme_bw() + theme(legend.background = element_rect(fill = "white", size = 2.5, linetype = "solid"),
legend.title = element_text(colour = "black",size = 20, face = "bold"),
legend.text = element_text(colour = "black", size = 30, face = "bold"),
title = element_text(face = "bold", color = "#4e4d4d"),
panel.grid.major = element_blank(),
panel.border = element_blank(),
plot.title = element_text(hjust = 1),
axis.text.y = element_text(size = 20, face = "bold"),
axis.text.x = element_blank(),
axis.title = element_text(size = 20, face = "bold"),
legend.position = "top") +
scale_x_continuous(labels = dollar) + labs(title = "") +
labs(x = "Pesos") + labs(y = "\n Frecuencia \n")
return(histograma)
}
Accion = 'Bancolombia'
Retornos_historicos = as.data.frame(Retornos_historicos)
Distribucion_perdidas = Retornos_historicos[,Accion]*Ultimo_precio[Accion]
Distribucion_perdidas
Percentil_graficar = VaR_niveles[Accion]
Graficar_histograma(Distribucion_accion =Distribucion_perdidas, Percentil_graficar = Percentil_graficar)
Percentil_graficar = VaR_niveles[Accion]
Percentil_graficar
Accion = 'Bancolombia'
Retornos_historicos = as.data.frame(Retornos_historicos)
Distribucion_perdidas = Retornos_historicos[,Accion]*Ultimo_precio[Accion]
Percentil_graficar = VaR_niveles[Accion]
Percentil_graficar
######## -------- Interpretacion --------- ########
### Con un nivel de confianza Alpha. Los retornos se pueden
### a mi me usta la interpretación de diego de que 1 de cada 20 días va a observar una perdida del 2.4%
## De que 1 de cada 20 días se va observar una perdida del 2.4%
### ------ VAR porcentual: Retorno a pesos ---- ####
### --- Unidades por ultimo precio observado ------ #####
Resultados_agregados <- as.data.frame(cbind(VaR_pct,VaR_niveles,Portafolio_acciones[Vector_de_empresas,"Acciones"]))
colnames(Resultados_agregados) <- c("Porcentaje","Nivel_individual","Nocional")
Resultados_agregados
Accion = 'Bancolombia'
Retornos_historicos = as.data.frame(Retornos_historicos)
Distribucion_perdidas = Retornos_historicos[,Accion]*Ultimo_precio[Accion]
Percentil_graficar = VaR_niveles[Accion]
Graficar_histograma(Distribucion_accion = Distribucion_perdidas, Percentil_graficar = Percentil_graficar)
######## -------- Interpretacion --------- ########
### Con un nivel de confianza Alpha. Los retornos se pueden
### ------ VAR porcentual: Retorno a pesos ---- ####
### --- Unidades por ultimo precio observado ------ #####
Resultados_agregados <- as.data.frame(cbind(VaR_pct,VaR_niveles,Portafolio_acciones[Vector_de_empresas,"Acciones"]))
############# ---------- Clase 2 ------------ #######
####### ----------- Limpiar ambiente ------- ######
rm(list = ls())
##### -------- librerias ------- ######
librerias <- c("readxl","ggplot2","scales","timeSeries","forecast","fOptions","mFilter","lubridate","quantmod","car")
###### ----- Carga de librerias ------ ####
if(length(setdiff(librerias, rownames(installed.packages()))) > 0){
install.packages(setdiff(librerias, rownames(installed.packages())))}
invisible(sapply(librerias, require, character.only = TRUE,quietly = TRUE))
### ---------------------------- COLCAP ----------------------------- ###
Colcap =  as.data.frame(read_excel("Colcap.xlsx",col_types = c("date","numeric","numeric","numeric")))
head(Colcap)
### --- Organizar los datos --- ###
Colcap = Colcap[,c(1:2)]
### ----- Renombrar columnas  ------ #####
colnames(Colcap) = c("Fecha","Colcap")
### ----- Asegurarse que la variable de Colcap sea númerica --- ####
Colcap[,2] = as.numeric(Colcap[,2])
### -----  Convertir en fecha --- ####
Colcap[,1] = as.Date(Colcap[,1])
################### ------------ Convertir en una serie de tiempo -------------------- ##################
Colcap_ts = xts(Colcap$Colcap,order.by = Colcap$Fecha)
plot(Colcap_ts)
########## ------------------ temporalidades ------------------ ###########
################### ------------ Precios del COLCAP: Semanales -------------------- ##################
Colcap_week = apply.weekly(Colcap_ts,function(x) mean(x))
plot(Colcap_week)
################### ------------ Precios del COLCAP: Mensuales -------------------- ##################
Colcap_month = apply.monthly(Colcap_ts,function(x) mean(x))
plot(Colcap_month)
################### ------------ Precios del COLCAP: Trimestrales -------------------- ###############
Colcap_quarter = apply.quarterly(Colcap_ts,function(x) mean(x))
plot(Colcap_quarter)
############# --------------------- Parte 3: Decidir temporalidad ---------------------  #############
### --- Para decidir la Granuralidad del tiempo a tratar se gráfican todas las temporalidades --- ###
### --- Se puede ver que debido a la alta volatilidad del COLCAP, la frecuencia mensual es un buen ###
### --- Candidato debido a que este captura indirectamente las volatilidades semanales y diarias ---###
### ---  Pero no ignora, ni altera los posibles componentes de la serie de Tiempo anual  ---- ###
Grafico_Colcap = ggplot(Colcap) + geom_line(aes(y = Colcap, x = Fecha), size = 1,color="#0040a4") + theme_bw()
### --- Conceptualmente se puede pensar que el COLCAP es heterocedastico en T --- ###
Colcap_month_log = log(Colcap_month)
################### ------------ Componentes del COLCAP -------------------- ###############
Colcap_month_log = ts(as.data.frame(Colcap_month)[,1],start = c(year(as.Date(rownames(as.data.frame(Colcap_month))[1])),month(as.Date(rownames(as.data.frame(Colcap_month))[1]))),frequency = 12)
########### ------------------------ Parte 2: Filtro de Hodrick–Prescott ------------------------- ###########
### ------- Prueba con un lambda 0 ------ #####
Filtro_0 = hpfilter(Colcap_month_log,type = "lambda", freq = 0)
plot(Filtro_0)
### ------- Prueba con un lambda 14400 ------ #####
Filtro_14400=hpfilter(Colcap_month_log,type = "lambda", freq = 14400)
plot(Filtro_14400)
########## ------------------- Estimar tendencia: Regresion --------- ################3
### ------------ Objetivo: Evaluar prueba de hipotesis  ------------ ###
### ------------ Modelos: Tendencia --------------- ###
modelo1 = tslm(Colcap_month_log ~ trend)
modelo2 = tslm(Colcap_month_log ~ trend+I(trend^2))
modelo3 = tslm(Colcap_month_log ~ trend+I(trend^2)+I(trend^3))
modelo4 = tslm(Colcap_month_log ~ trend+I(trend^2)+I(trend^3)+I(trend^4))
modelo5 = tslm(Colcap_month_log ~ I(log(trend)))
modelo6 = tslm(Colcap_month_log ~ I(exp(trend)))
### --- Estadisticas descriptivas --- ###
summary(modelo1)
summary(modelo2)
summary(modelo3)
summary(modelo4)
summary(modelo5)
summary(modelo6)
### ------------ Gráfico Serie Ajustada por Tendencia --------------- ###
par(mfrow=c(2,3), mar=c(3, 4, 2, 2) )
### ------------ Lineal --------------- ###
plot(Colcap_month_log, lwd=1, xlab="", main="Lineal", ylab="Log Valor Colcap",cex.lab=1, cex.axis=1, cex.main=1, cex.sub=1)
lines(modelo1$fitted.values, col="#0040a4", lwd=2, lty=2)
### ------------ P2  --------------- ###
plot(Colcap_month_log, lwd=1, xlab="", main="Polinomio (Grado 2)",ylab="Log Valor Colcap",cex.lab=1, cex.axis=1, cex.main=1, cex.sub=1)
lines(modelo2$fitted.values, col="#0040a4", lwd=2, lty=1)
### ------------ P3 --------------- ###
plot(Colcap_month_log, lwd=1, xlab="", main="Polinomio (Grado 3)",ylab="Log Valor Colcap",cex.lab=1, cex.axis=1, cex.main=1, cex.sub=1)
lines(modelo3$fitted.values, col="#0040a4", lwd=2, lty=1)
### ------------ P4 --------------- ###
plot(Colcap_month_log, lwd=1, xlab="", main="Polinomio (Grado 4)",ylab="Log Valor Colcap",cex.lab=1, cex.axis=1, cex.main=1, cex.sub=1)
lines(modelo4$fitted.values, col="#0040a4", lwd=2, lty=1)
### ------------ log --------------- ###
plot(Colcap_month_log, lwd=1, xlab="", main="Logarítmico",ylab="Log Valor Colcap",cex.lab=1, cex.axis=1, cex.main=1, cex.sub=1)
lines(modelo5$fitted.values, col="#0040a4", lwd=2, lty=1)
### ------------ Exp --------------- ###
plot(Colcap_month_log, lwd=1, xlab="", main="Exponencial",ylab="Log Valor Colcap",cex.lab=1, cex.axis=1, cex.main=1, cex.sub=1)
lines(modelo6$fitted.values, col="#0040a4", lwd=2, lty=1)
#### --- limpiar grafico ---- #
dev.off()
### ------------ Gráfico Residuales Ajustados por Tendencia -------------- ###
par(mfrow=c(2,3), mar=c(3, 4, 2, 2) )
plot(modelo1$residuals, lwd=2, xlab="", main="Lineal",ylab="Valor Colcap")
abline(h=0, col="#0040a4", lty=2)
plot(modelo2$residuals, lwd=2, xlab="", main="Polinomio (Grado 2)",ylab="Valor Colcap")
abline(h=0, col="#0040a4", lty=2)
plot(modelo3$residuals, lwd=2, xlab="", main="Polinomio (Grado 3)",ylab="Valor Colcap")
abline(h=0, col="#0040a4", lty=2)
plot(modelo4$residuals, lwd=2, xlab="", main="Polinomio (Grado 4)",ylab="Valor Colcap")
abline(h=0, col="#0040a4", lty=2)
plot(modelo5$residuals, lwd=2, xlab="", main="Logarítmico",ylab="Valor Colcap")
abline(h=0, col="#0040a4", lty=2)
plot(modelo6$residuals, lwd=2, xlab="", main="Exponencial",ylab="Valor Colcap")
abline(h=0, col="#0040a4", lty=2)
##### ------ Evaluacion de tendencia con criterios de informacion ------- #####
Modelo = modelo1
AIC(Modelo)
BIC=BIC(Modelo)
R2_ajustado=summary(Modelo)$adj.r.squared
Box_Pierce=Box.test(Modelo$residuals, type = "Box-Pierce")$p.value
Ljung_Box=Box.test(Modelo$residuals, type = "Ljung-Box")$p.value
#### =-- Pvalor: Prueba F -- ###
round(pf(q=summary(Modelo)$fstatistic[1], df1=summary(Modelo)$fstatistic[2], df2=summary(Modelo)$fstatistic[3], lower.tail=FALSE),4)
#### ------ Generalizar en una función ---- ####
Tabla_resumen<-function(Modelo,Titulo){
data.frame(Modelo=Titulo,
AIC=AIC(Modelo),
BIC=BIC(Modelo),
R2_ajustado=summary(Modelo)$adj.r.squared,
Box_Pierce=Box.test(Modelo$residuals, type = "Box-Pierce")$p.value,
Ljung_Box=Box.test(Modelo$residuals, type = "Ljung-Box")$p.value, row.names = NULL,
P_valor_f = round(pf(q=summary(Modelo)$fstatistic[1], df1=summary(Modelo)$fstatistic[2], df2=summary(Modelo)$fstatistic[3], lower.tail=FALSE),4)
)
}
### --- Criterios de información sin Tendencia --- ###
Tabla_tendencia = rbind(Tabla_resumen(modelo1,Titulo = "Lineal"),
Tabla_resumen(modelo2,Titulo = "Polinomio (Grado 2)"),
Tabla_resumen(modelo3,Titulo = "Polinomio (Grado 3)"),
Tabla_resumen(modelo4,Titulo = "Polinomio (Grado 4)"),
Tabla_resumen(modelo5,Titulo = "Logaritmico"),
Tabla_resumen(modelo6,Titulo = "Exponencial"))
### ------------ Modelos: Season --------------- ###
modelo1_season = tslm(Colcap_month_log ~ trend+season)
modelo2_season = tslm(Colcap_month_log ~ trend+I(trend^2)+season)
modelo3_season = tslm(Colcap_month_log ~ trend+I(trend^2)+I(trend^3)+season)
modelo4_season = tslm(Colcap_month_log ~ trend+I(trend^2)+I(trend^3)+I(trend^4)+season)
modelo5_season = tslm(Colcap_month_log ~ I(log(trend))+season)
modelo6_season = tslm(Colcap_month_log ~ I(exp(trend))+season)
### --- Estadisticas descriptivas --- ###
summary(modelo1_season)
summary(modelo2_season)
summary(modelo3_season)
summary(modelo4_season)
summary(modelo5_season)
summary(modelo6_season)
### ------------ Gráfico Serie Ajustada por Tendencia --------------- ###
par(mfrow=c(2,3), mar=c(3, 4, 2, 2) )
### ------------ Lineal --------------- ###
plot(Colcap_month_log, lwd=1, xlab="", main="Lineal", ylab="Log Valor Colcap",cex.lab=1, cex.axis=1, cex.main=1, cex.sub=1)
lines(modelo1_season$fitted.values, col="#0040a4", lwd=2, lty=2)
### ------------ P2  --------------- ###
plot(Colcap_month_log, lwd=1, xlab="", main="Polinomio (Grado 2)",ylab="Log Valor Colcap",cex.lab=1, cex.axis=1, cex.main=1, cex.sub=1)
lines(modelo2_season$fitted.values, col="#0040a4", lwd=2, lty=1)
### ------------ P3 --------------- ###
plot(Colcap_month_log, lwd=1, xlab="", main="Polinomio (Grado 3)",ylab="Log Valor Colcap",cex.lab=1, cex.axis=1, cex.main=1, cex.sub=1)
lines(modelo3_season$fitted.values, col="#0040a4", lwd=2, lty=1)
### ------------ P4 --------------- ###
plot(Colcap_month_log, lwd=1, xlab="", main="Polinomio (Grado 4)",ylab="Log Valor Colcap",cex.lab=1, cex.axis=1, cex.main=1, cex.sub=1)
lines(modelo4_season$fitted.values, col="#0040a4", lwd=2, lty=1)
### ------------ log --------------- ###
plot(Colcap_month_log, lwd=1, xlab="", main="Logarítmico",ylab="Log Valor Colcap",cex.lab=1, cex.axis=1, cex.main=1, cex.sub=1)
lines(modelo5_season$fitted.values, col="#0040a4", lwd=2, lty=1)
### ------------ Exp --------------- ###
plot(Colcap_month_log, lwd=1, xlab="", main="Exponencial",ylab="Log Valor Colcap",cex.lab=1, cex.axis=1, cex.main=1, cex.sub=1)
lines(modelo6_season$fitted.values, col="#0040a4", lwd=2, lty=1)
#### --- limpiar grafico ---- #
dev.off()
### ------------ Gráfico Residuales Ajustados por Tendencia -------------- ###
par(mfrow=c(2,3), mar=c(3, 4, 2, 2) )
plot(modelo1_season$residuals, lwd=2, xlab="", main="Lineal",ylab="Valor Colcap")
abline(h=0, col="#0040a4", lty=2)
plot(modelo2_season$residuals, lwd=2, xlab="", main="Polinomio (Grado 2)",ylab="Valor Colcap")
abline(h=0, col="#0040a4", lty=2)
plot(modelo3_season$residuals, lwd=2, xlab="", main="Polinomio (Grado 3)",ylab="Valor Colcap")
abline(h=0, col="#0040a4", lty=2)
plot(modelo4_season$residuals, lwd=2, xlab="", main="Polinomio (Grado 4)",ylab="Valor Colcap")
abline(h=0, col="#0040a4", lty=2)
plot(modelo5_season$residuals, lwd=2, xlab="", main="Logarítmico",ylab="Valor Colcap")
abline(h=0, col="#0040a4", lty=2)
plot(modelo6_season$residuals, lwd=2, xlab="", main="Exponencial",ylab="Valor Colcap")
abline(h=0, col="#0040a4", lty=2)
### --- Criterios de información sin esta --- ###
Tabla_tendencia = rbind(Tabla_resumen(modelo1_season,Titulo = "Lineal"),
Tabla_resumen(modelo2_season,Titulo = "Polinomio (Grado 2)"),
Tabla_resumen(modelo3_season,Titulo = "Polinomio (Grado 3)"),
Tabla_resumen(modelo4_season,Titulo = "Polinomio (Grado 4)"),
Tabla_resumen(modelo5_season,Titulo = "Logaritmico"),
Tabla_resumen(modelo6_season,Titulo = "Exponencial"))
##### ------ Ajustados ----- #####
plot(Colcap_month_log, lwd=2, xlab="", main="Polinomio (Grado 2)", ylab="Valor Colcap",cex.lab=2.5, cex.axis=2.5, cex.main=2.5, cex.sub=2.5)
lines(modelo1_season$fitted.values, col="#0040a4", lwd=2, lty=1)
############# ---------- Calculo de VAR histórico ------------ #######
####### ----------- Limpiar ambiente ------- ######
rm(list = ls())
##### -------- librerias ------- ######
librerias <- c("readxl","ggplot2","scales",'timeSeries')
###### ----- Instalacion liberarias ------ ####3
if(length(setdiff(librerias, rownames(installed.packages()))) > 0){
install.packages(setdiff(librerias, rownames(installed.packages())))}
invisible(sapply(librerias, require, character.only = TRUE,quietly = TRUE))
####### --------- Paso 1: Insumos ---------- ######
### Defina Portafolio_acciones y asigne la informacion de Portafolio.xlsx
### Defina Historia_precios y asigne la informacion de Historia.xlsx
###### ----------- Precios acciones ---------- #####
Historia_precios = as.data.frame(read_excel('Historia.xlsx'))
## ----- Organice los datos
Historia_precios = Historia_precios[-c(1,3),-c(1,2)]
## -- Ponga el nombre de las columnas -- ##
colnames(Historia_precios) = Historia_precios[1,]
#### ------ Elimine la primera fila de nombres ------ ###
Historia_precios = Historia_precios[-1,]
#### ----- Todo numerico ----- ####
Historia_precios = as.data.frame(apply(Historia_precios, 2, as.numeric))
#### ----- Arregle el formato de fechas ---- ######
Historia_precios$Fecha = as.Date(Historia_precios$Fecha,origin = "1899-12-30")
#### ----- Modificar el nombre de las filas con las fechas ------ ####
rownames(Historia_precios) =  Historia_precios$Fecha
#### ------- Eliminar fila de fecha ------ ####
Historia_precios = Historia_precios[,-c(1)]
Historia_precios = as.matrix(Historia_precios)
#### ---- Vector de las empresas ---- ####
Vector_de_empresas = colnames(Historia_precios)
####### -------------- Portafolio de inversion: -------------- #######
Portafolio_acciones = as.data.frame(read_excel('Portafolio.xlsx'))
##### ---- Se crea una columna del valor de la accion ---- #####
Portafolio_acciones$Valor = 0
#### ----- Se pone el nombre de las acciones a las filas ----- ####
rownames(Portafolio_acciones) = Portafolio_acciones$Empresa
#### ----- Se elimina el vector de acciones ---- ###
Portafolio_acciones = Portafolio_acciones[,-1]
####### --------- Fin Paso 1: Insumos ---------- ######
###### ----------- Paso 2: Valor del portafolio ---------- #######
### ------ Ultimo precio ------ ###
Ultimo_precio = Historia_precios[dim(Historia_precios)[1],]
###### --------- Valor portafolio: Unidades por ultimo dato ------ #####
Portafolio_acciones$Valor = Portafolio_acciones[Vector_de_empresas,"Acciones"]*Ultimo_precio
Valor_total_portafolio = sum(Portafolio_acciones$Valor)
print(paste0('El valor total del portafolio es de $', format(Valor_total_portafolio,big.mark=",",scientific=FALSE) , ' pesos'))
###### ----------- Fin paso 2: Valor del portafolio ---------- #######
###### ---------- Paso 3: Calculo de Retornos historicos ------- ######
#### ----- Plazo de los retornos a un dia #######
Retornos_historicos = apply(Historia_precios, 2, function(x){returns(x,method = 'simple')})
##### ------ Se elimina el primero ------- #####
Retornos_historicos = Retornos_historicos[-1,]
######### ------------- Calculo de VAR ----------- #########3
## calcular el VaR a partir de una distribucion
## 1. Retornos_historicos: Matriz de los retornos
## 2. Confianza: Confianza de confianza para el cual se quiere el VaR. Por ejemplo 5%
### Output: vector con el VaR: en Retorno ----- ####33
Confianza = 0.05
################# -------------- Forma 1: VaR Independiente por accion ------------- ##########3
####### ------- Calcula el perceil 1-alpha para cada una de las columnas de los retornos ------ ######
VaR_pct = apply(Retornos_historicos, 2,function(x){quantile(x = na.omit(as.numeric(x)),probs = (Confianza))})
####### ------- Retornos a pesos------ ######
VaR_niveles <- VaR_pct*Ultimo_precio
###### --------- Grafico --------- ########
Graficar_histograma = function(Distribucion_accion,Percentil_graficar){
histograma = qplot(Distribucion_accion, geom = "histogram", fill = I("#ffa400"),
col = I("#ffa400")) + geom_vline(aes(xintercept = as.numeric(Percentil_graficar)), size = 3,linetype = "longdash", colour = "#7b98ac") +
geom_vline(aes(xintercept = as.numeric(median(Distribucion_accion))), size = 3, linetype = "solid", colour = "#00577d") +
theme_bw() + theme(legend.background = element_rect(fill = "white", size = 2.5, linetype = "solid"),
legend.title = element_text(colour = "black",size = 20, face = "bold"),
legend.text = element_text(colour = "black", size = 30, face = "bold"),
title = element_text(face = "bold", color = "#4e4d4d"),
panel.grid.major = element_blank(),
panel.border = element_blank(),
plot.title = element_text(hjust = 1),
axis.text.y = element_text(size = 20, face = "bold"),
axis.text.x = element_blank(),
axis.title = element_text(size = 20, face = "bold"),
legend.position = "top") +
scale_x_continuous(labels = dollar) + labs(title = "") +
labs(x = "Pesos") + labs(y = "\n Frecuencia \n")
return(histograma)
}
######## -------- Interpretacion --------- ########
### Con un nivel de confianza Alpha. Los retornos se pueden
### ------ VAR porcentual: Retorno a pesos ---- ####
Accion = 'Bancolombia'
Retornos_historicos = as.data.frame(Retornos_historicos)
Distribucion_perdidas = Retornos_historicos[,Accion]*Ultimo_precio[Accion]
Percentil_graficar = VaR_niveles[Accion]
Graficar_histograma(Distribucion_accion = Distribucion_perdidas, Percentil_graficar = Percentil_graficar)
######## -------- Interpretacion --------- ########
### Con un nivel de confianza Alpha. Los retornos se pueden
### ------ VAR porcentual: Retorno a pesos ---- ####
### --- Unidades por ultimo precio observado ------ #####
Resultados_agregados <- as.data.frame(cbind(VaR_pct,VaR_niveles,Portafolio_acciones[Vector_de_empresas,"Acciones"]))
Resultados_agregados
colnames(Resultados_agregados) <- c("Porcentaje","Nivel_individual","Nocional")
###### ---- Agregar VaR por Nocional -------- #######
Resultados_agregados$Nivel_agregado = as.numeric(Resultados_agregados[,"Nivel_individual"]*Resultados_agregados[,"Nocional"])
Resultados_agregados
##### ------ Se suma los independientes para obtener el VaR total ------- ######
VaR_total_independiente = sum(Resultados_agregados$Nivel_agregado)
######## -------- Interpretacion --------- ########
### Con un nivel de confianza Alpha. Los retornos se pueden
### ------ VAR porcentual: Retorno a pesos ---- ####
Accion = 'Bancolombia'
Retornos_historicos = as.data.frame(Retornos_historicos)
Distribucion_perdidas = Retornos_historicos[,Accion]*Ultimo_precio[Accion]
Percentil_graficar = VaR_niveles[Accion]
Percentil_graficar
Percentil_graficar = VaR_niveles[Accion]
Graficar_histograma(Distribucion_accion = Distribucion_perdidas, Percentil_graficar = Percentil_graficar)
######## -------- Interpretacion --------- ########
### Con un nivel de confianza Alpha. Los retornos se pueden
### ------ VAR porcentual: Retorno a pesos ---- ####
### --- Unidades por ultimo precio observado ------ #####
Resultados_agregados <- as.data.frame(cbind(VaR_pct,VaR_niveles,Portafolio_acciones[Vector_de_empresas,"Acciones"]))
Resultados_agregados
VaR_pct
VaR_niveles
############# ---------- Calculo de VAR histórico ------------ #######
####### ----------- Limpiar ambiente ------- ######
rm(list = ls())
##### -------- librerias ------- ######
librerias <- c("readxl","ggplot2","scales",'timeSeries')
###### ----- Instalacion liberarias ------ ####3
if(length(setdiff(librerias, rownames(installed.packages()))) > 0){
install.packages(setdiff(librerias, rownames(installed.packages())))}
invisible(sapply(librerias, require, character.only = TRUE,quietly = TRUE))
###### ----------- Precios acciones ---------- #####
Historia_precios = as.data.frame(read_excel('Historia.xlsx'))
## ----- Organice los datos
Historia_precios = Historia_precios[-c(1,3),-c(1,2)]
## -- Ponga el nombre de las columnas -- ##
colnames(Historia_precios) = Historia_precios[1,]
#### ------ Elimine la primera fila de nombres ------ ###
Historia_precios = Historia_precios[-1,]
#### ----- Todo numerico ----- ####
Historia_precios = as.data.frame(apply(Historia_precios, 2, as.numeric))
#### ----- Arregle el formato de fechas ---- ######
Historia_precios$Fecha = as.Date(Historia_precios$Fecha,origin = "1899-12-30")
#### ----- Modificar el nombre de las filas con las fechas ------ ####
rownames(Historia_precios) =  Historia_precios$Fecha
#### ------- Eliminar fila de fecha ------ ####
Historia_precios = Historia_precios[,-c(1)]
Historia_precios = as.matrix(Historia_precios)
#### ---- Vector de las empresas ---- ####
Vector_de_empresas = colnames(Historia_precios)
####### -------------- Portafolio de inversion: -------------- #######
Portafolio_acciones = as.data.frame(read_excel('Portafolio.xlsx'))
##### ---- Se crea una columna del valor de la accion ---- #####
Portafolio_acciones$Valor = 0
#### ----- Se pone el nombre de las acciones a las filas ----- ####
rownames(Portafolio_acciones) = Portafolio_acciones$Empresa
#### ----- Se elimina el vector de acciones ---- ###
Portafolio_acciones = Portafolio_acciones[,-1]
###### ----------- Paso 2: Valor del portafolio ---------- #######
### ------ Ultimo precio ------ ###
Ultimo_precio = Historia_precios[dim(Historia_precios)[1],]
###### --------- Valor portafolio: Unidades por ultimo dato ------ #####
Portafolio_acciones$Valor = Portafolio_acciones[Vector_de_empresas,"Acciones"]*Ultimo_precio
Valor_total_portafolio = sum(Portafolio_acciones$Valor)
print(paste0('El valor total del portafolio es de $', format(Valor_total_portafolio,big.mark=",",scientific=FALSE) , ' pesos'))
###### ---------- Paso 3: Calculo de Retornos historicos ------- ######
#### ----- Plazo de los retornos a un dia #######
Retornos_historicos = apply(Historia_precios, 2, function(x){returns(x,method = 'simple')})
##### ------ Se elimina el primero ------- #####
Retornos_historicos = Retornos_historicos[-1,]
######### ------------- Calculo de VAR ----------- #########3
## calcular el VaR a partir de una distribucion
## 1. Retornos_historicos: Matriz de los retornos
## 2. Confianza: Confianza de confianza para el cual se quiere el VaR. Por ejemplo 5%
### Output: vector con el VaR: en Retorno ----- ####33
Confianza = 0.05
####### ------- Calcula el perceil 1-alpha para cada una de las columnas de los retornos ------ ######
VaR_pct = apply(Retornos_historicos, 2,function(x){quantile(x = na.omit(as.numeric(x)),probs = (Confianza))})
####### ------- Retornos a pesos------ ######
VaR_niveles <- VaR_pct*Ultimo_precio
